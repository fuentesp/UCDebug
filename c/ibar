/*
 * !UCDebug, ARM debugger for RISC OS.
 * https://github.com/fuentesp/UCDebug
 * Copyright (C) 2018  University of Cantabria
 *
 * !UCDebug was developed by the Computer Architecture and Technology
 * Group at the University of Cantabria. A comprehensive list of authors
 * can be found in the file AUTHORS.txt.
 *
 * You can reach the main developers at {fernando.vallejo, cristobal.camarero,
 * pablo.fuentes}@unican.es.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "oslib/wimp.h"
#include "oslib/wimpspriteop.h"
/* Added C libraries to avoid warnings due to declaration incompatibilities */
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#include "ibar.h"

/* Info dialog vars */
struct InfoType InfoIcons[8];

/* Menu variables */
wimp_menu *IconBarMenu;
const int num_menu_options = 4;
const char *menu_options[] = { "Info", "Reset view", "FP Regs", "Quit" };
const char *submenu_options[] = { "", "", "Single,Double", "" };
const char *submenu_separator = ",";

/* ibar_initialise performs all the initialization tasks associated with the GUI:
 - Creates an icon with the application logo in the iconbar
 - Generates and fills the structure associated with the Iconbar menu
 */
void ibar_initialise(void) {
	wimp_icon_create icon_bar;

	icon_bar.w = wimp_ICON_BAR_RIGHT;
	icon_bar.icon.extent.x0 = 0;
	icon_bar.icon.extent.y0 = 0;
	icon_bar.icon.extent.x1 = 68;
	icon_bar.icon.extent.y1 = 68;
	icon_bar.icon.flags = wimp_ICON_SPRITE
			| (wimp_BUTTON_CLICK << wimp_ICON_BUTTON_TYPE_SHIFT);
	strncpy(icon_bar.icon.data.sprite, SpriteName, osspriteop_NAME_LIMIT);
	wimp_create_icon(&icon_bar);

	InitialiseIconbarMenu();
}

/* open_window creates and opens a window. It receives the following parameters:
 * - Position (X and Y): the coordinates in OS points from the bottom left corner
 * 		(position of that corner)
 * - Visible (X and Y): the dimensions of the visible area
 * - Size (X and Y): the size of the total working area
 * - Sc (V and H): the OS scroll points
 * - Buttons that need to be activated:
 * 		* Bit 0: background button
 * 		* Bit 1: close button
 * 		* Bit 2: title button
 * 		* Bit 3: maximize button
 * 		* Bit 4: resize button
 * The function returns a pointer to a window handle.
 */
wimp_w open_window(char *Title, int SizeX, int SizeY, int PosX, int PosY, int VisX,
		int VisY, int ScH, int ScV, int Buttons) {
	wimp_window window_definition;
	wimp_window_state state;
	wimp_w win_handle;

	if (SizeX < VisX) VisX = SizeX;
	if (SizeY < VisY) VisY = SizeY;

	window_definition.visible.x0 = PosX;
	window_definition.visible.y0 = PosY;
	window_definition.visible.x1 = PosX + VisX;
	window_definition.visible.y1 = PosY + VisY;

	window_definition.xscroll = ScH;
	window_definition.yscroll = -ScV;

	window_definition.next = wimp_TOP;

	window_definition.flags = wimp_WINDOW_MOVEABLE | wimp_WINDOW_AUTO_REDRAW
			| wimp_WINDOW_NO_BOUNDS | wimp_WINDOW_SCROLL_REPEAT | wimp_WINDOW_OPEN
			| wimp_WINDOW_PARTIAL_SIZE | wimp_WINDOW_NEW_FORMAT;
	if (SizeX != VisX)
		window_definition.flags = window_definition.flags | wimp_WINDOW_HSCROLL;
	if (SizeY != VisY)
		window_definition.flags = window_definition.flags | wimp_WINDOW_VSCROLL;
	if ((Buttons & 0x01) != 0)
		window_definition.flags = window_definition.flags | wimp_WINDOW_BACK_ICON;
	if ((Buttons & 0x02) != 0)
		window_definition.flags = window_definition.flags | wimp_WINDOW_CLOSE_ICON;
	if ((Buttons & 0x04) != 0)
		window_definition.flags = window_definition.flags | wimp_WINDOW_TITLE_ICON;
	if ((Buttons & 0x08) != 0)
		window_definition.flags = window_definition.flags | wimp_WINDOW_TOGGLE_ICON;
	if ((Buttons & 0x10) != 0)
		window_definition.flags = window_definition.flags | wimp_WINDOW_SIZE_ICON;

	window_definition.title_fg = wimp_COLOUR_BLACK;
	window_definition.title_bg = wimp_COLOUR_LIGHT_GREY;
	window_definition.work_fg = wimp_COLOUR_BLACK;
	window_definition.work_bg = wimp_COLOUR_VERY_LIGHT_GREY;
	window_definition.scroll_outer = wimp_COLOUR_MID_LIGHT_GREY;
	window_definition.scroll_inner = wimp_COLOUR_VERY_LIGHT_GREY;
	window_definition.highlight_bg = wimp_COLOUR_CREAM;

	window_definition.extra_flags = 0;

	window_definition.extent.x0 = 0;
	window_definition.extent.y0 = -SizeY;
	window_definition.extent.x1 = SizeX;
	window_definition.extent.y1 = 0;

	window_definition.title_flags = wimp_ICON_TEXT | wimp_ICON_BORDER | wimp_ICON_HCENTRED
			| wimp_ICON_VCENTRED | wimp_ICON_FILLED;
	window_definition.work_flags = wimp_BUTTON_CLICK << wimp_ICON_BUTTON_TYPE_SHIFT;

	window_definition.sprite_area = wimpspriteop_AREA;

	window_definition.xmin = 16;
	window_definition.ymin = 16;

	strncpy(window_definition.title_data.text, Title, 12);

	window_definition.icon_count = 0;

	win_handle = wimp_create_window(&window_definition);

	state.w = win_handle;
	wimp_get_window_state(&state);
	wimp_open_window((wimp_open *) &state);

	return win_handle;

}

/* TextIconCreate creates an icon in a given window. It receives the following parameters:
 * - WinHandle: pointer to the window handle where the icon will be placed
 * - Position (X and Y): coordinates in OS points from the icon top left corner
 * - Width and Height: size of the icon in OS points
 * - Text: pointer to the variable with the text to display. It must have a long life.
 * - Length: size of the string with the text to be displayed (this is the max length, not
 * 		necessarily the size of the initial value).
 * The function returns a pointer to the icon handler.
 */
wimp_i TextIconCreate(wimp_w WinHandle, int PosX, int PosY, int Width, int Height,
		char *Text, int Length, char *Validation) {
	wimp_icon_create icon_definition;

	icon_definition.w = WinHandle;
	icon_definition.icon.extent.x0 = PosX;
	icon_definition.icon.extent.y0 = -(PosY + Height);
	icon_definition.icon.extent.x1 = PosX + Width;
	icon_definition.icon.extent.y1 = -PosY;
	icon_definition.icon.flags = wimp_ICON_TEXT | wimp_ICON_VCENTRED | wimp_ICON_FILLED
			| wimp_ICON_INDIRECTED | (wimp_BUTTON_CLICK << wimp_ICON_BUTTON_TYPE_SHIFT)
			| wimp_ICON_ANTI_ALIASED | (AppFont << wimp_ICON_FONT_HANDLE_SHIFT);

	icon_definition.icon.data.indirected_text.text = Text;
	icon_definition.icon.data.indirected_text.size = Length;
	snprintf(Validation, 4, "F%01X%01X", wimp_COLOUR_VERY_LIGHT_GREY, wimp_COLOUR_BLACK);
	icon_definition.icon.data.indirected_text.validation = Validation;

	return wimp_create_icon(&icon_definition);
}

/* IconCreate creates an icon in a given window, using the default font in the desktop.
 * 	It is mainly used to create the app menu. It receives the following parameters:
 * - WinHandle: pointer to the window handle where the icon will be placed
 * - Position (X and Y): coordinates in OS points from the icon top left corner
 * - Width and Height: size of the icon in OS points
 * - Flags: flags to be used in the creation of the icon (this is, the properties of the
 * 		icon as defined in OSLib).
 * - Text: pointer to the variable with the text to display. It must have a long life.
 * - Length: size of the string with the text to be displayed (this is the max length, not
 * 		necessarily the size of the initial value).//FIXME: not included!
 * - Validation: string with the validation field. This is used to define additional
 * 		properties of the icon. It must have a long life.
 * The function returns a pointer to the icon handler.
 */
wimp_i IconCreate(wimp_w WinHandle, int PosX, int PosY, int Width, int Height, int Flags,
		char *Text, int Length, char *Validation) {
	wimp_icon_create icon_definition;

	icon_definition.w = WinHandle;
	icon_definition.icon.extent.x0 = PosX;
	icon_definition.icon.extent.y0 = -(PosY + Height);
	icon_definition.icon.extent.x1 = PosX + Width;
	icon_definition.icon.extent.y1 = -PosY;
	icon_definition.icon.flags = Flags;

	if ((Flags & wimp_ICON_INDIRECTED) == 0) {
		strncpy(icon_definition.icon.data.text, Text, 11);
	} else {
		icon_definition.icon.data.indirected_text.text = Text;
		icon_definition.icon.data.indirected_text.size = Length;
		icon_definition.icon.data.indirected_text.validation = Validation;
	}

	return wimp_create_icon(&icon_definition);
}

/* UpdateWindow redraws the window to refresh the icons displayed within */
void UpdateWindow(wimp_w WinHandle) {
	wimp_window_info *Info;

	Info = malloc(sizeof(wimp_window_info));
	Info->w = WinHandle;
	wimp_get_window_info(Info);
	wimp_force_redraw(WinHandle, Info->extent.x0, Info->extent.y0, Info->extent.x1,
			Info->extent.y1);
	free(Info);
}

/* Repositions a window in the specified coordinates.
 If the size/pos fields have a '-1' value, it uses the info from the current window size.
 If the nextw field has a -1 value, it pulls the window to the foreground;
 if it values -3, it pushes it to the background. */
void ResetWindow(wimp_w WinHandle, int SizeX, int SizeY, int PosX, int PosY, int ScH,
	int ScV, wimp_w NextW) {
	wimp_open *Open;
	Open = malloc(sizeof(wimp_open));
	wimp_window_info *Info;
	Info = malloc(sizeof(wimp_window_info));

	/* Un-iconise window */
	wimp_message umsg;
	umsg.size = 24;
	umsg.sender = 0;
	umsg.my_ref = 0;
	umsg.your_ref = 0;
	umsg.action = message_WINDOW_CLOSED;
	*((wimp_w *) ((unsigned int) (&umsg) + 20)) = WinHandle;

	wimp_send_message(wimp_USER_MESSAGE, &umsg, wimp_BROADCAST);

	Info->w = WinHandle;
	wimp_get_window_info(Info);
	Open->w = WinHandle;
	if (NextW == 0)
		Open->next = Info->next;
	else
		Open->next = NextW;
	if (ScH < 0)
		Open->xscroll = Info->xscroll;
	else
		Open->xscroll = ScH;
	if (ScV < 0)
		Open->yscroll = Info->yscroll;
	else
		Open->yscroll = -ScV;
	if (PosX < 0)
		Open->visible.x0 = Info->visible.x0;
	else
		Open->visible.x0 = PosX;
	if (PosY < 0)
		Open->visible.y0 = Info->visible.y0;
	else
		Open->visible.y0 = PosY;
	if (SizeX < 0)
		Open->visible.x1 = Info->visible.x1;
	else
		Open->visible.x1 = PosX + SizeX;
	if (SizeY < 0)
		Open->visible.y1 = Info->visible.y1;
	else
		Open->visible.y1 = PosY + SizeY;
	wimp_open_window(Open);

	free(Info);
	free(Open);
}

/* Iconise a window (hide it and pin an icon to the Pinboard) */
void IconiseWindow(wimp_w WinHandle) {
	wimp_message umsg;
	wimp_window_info *info;
	info = malloc(sizeof(wimp_window_info));

	/* Retrieve info about the window */
	info->w = WinHandle;
	wimp_get_window_info(info);

	/* Send an 'IconiseAt' message */
	umsg.size = 40;
	umsg.sender = 0;	// Filled up by WIMP
	umsg.my_ref = 0;	// Filled up by WIMP;
	umsg.your_ref = 0;	// Filled up by WIMP;
	umsg.action = message_ICONISE_AT;
	*((wimp_w *) (&(umsg.data))) = WinHandle;	// Window to pin
	*((wimp_t *) ((unsigned int) &(umsg.data) + 4)) = AppTask;	// Task handle
	*((int *) ((unsigned int) &(umsg.data) + 8)) = 0;		// X coordinate
	*((int *) ((unsigned int) &(umsg.data) + 12)) = 0;	// Y coordinate
	*((int *) ((unsigned int) &(umsg.data) + 16)) = 0;	// Flags
	wimp_send_message(wimp_USER_MESSAGE, &umsg, wimp_BROADCAST);

	/* Send an 'Iconise' message */
	umsg.size = 40;
	umsg.sender = 0;	// Filled up by WIMP
	umsg.my_ref = 0;	// Filled up by WIMP;
	umsg.your_ref = 0;	// Filled up by WIMP;
	umsg.action = message_ICONISE;
	*((wimp_w *) (&(umsg.data))) = WinHandle;
	*((wimp_t *) ((unsigned int) &(umsg.data) + 4)) = AppTask;
	strncpy(((char *) ((unsigned int) &(umsg.data) + 8)), info->title_data.text, 12);
	wimp_send_message(wimp_USER_MESSAGE, &umsg, wimp_BROADCAST);

	free(info);
}

/* ChTextFGColour changes the foreground color of a given icon */
void ChTextFGColour(wimp_w WinHandle, wimp_i IconHandle, int color) {
	wimp_icon_state i_s;
	i_s.w = WinHandle;
	i_s.i = IconHandle;
	wimp_get_icon_state(&i_s);
	int bg_col;
	sscanf(i_s.icon.data.indirected_text.validation, "F%1x", &bg_col);
	snprintf(i_s.icon.data.indirected_text.validation, 4, "F%01X%01X", bg_col, color);
}

/* ChTextBGColour changes the background color of a given icon */
void ChTextBGColour(wimp_w WinHandle, wimp_i IconHandle, int color) {
	wimp_icon_state i_s;
	i_s.w = WinHandle;
	i_s.i = IconHandle;
	wimp_get_icon_state(&i_s);
	int fg_col;
	sscanf(i_s.icon.data.indirected_text.validation, "F%*1x%1x", &fg_col);
	snprintf(i_s.icon.data.indirected_text.validation, 4, "F%01X%01X", color, fg_col);
}

/* Create the dialog box with the program info */
wimp_w OpenInfoDialog() {
	int i, j, Iflags;
	wimp_window InfoWin;
	wimp_w W;

	InfoWin.visible.x0 = 1766, InfoWin.visible.x1 = 2486;
	InfoWin.visible.y0 = 644, InfoWin.visible.y1 = 900;
	InfoWin.xscroll = 0, InfoWin.yscroll = 0;
	InfoWin.next = wimp_TOP;
	InfoWin.flags = wimp_WINDOW_MOVEABLE | wimp_WINDOW_AUTO_REDRAW
			| wimp_WINDOW_TITLE_ICON | wimp_WINDOW_NEW_FORMAT;
	InfoWin.title_fg = wimp_COLOUR_BLACK;
	InfoWin.title_bg = wimp_COLOUR_LIGHT_GREY;
	InfoWin.work_fg = wimp_COLOUR_BLACK;
	InfoWin.work_bg = wimp_COLOUR_VERY_LIGHT_GREY;
	InfoWin.scroll_outer = wimp_COLOUR_MID_LIGHT_GREY;
	InfoWin.scroll_inner = wimp_COLOUR_VERY_LIGHT_GREY;
	InfoWin.highlight_bg = wimp_COLOUR_CREAM;
	InfoWin.extra_flags = 0;
	InfoWin.extent.x0 = 0, InfoWin.extent.x1 = 1280;
	InfoWin.extent.y0 = -1024, InfoWin.extent.y1 = 0;
	InfoWin.title_flags = wimp_ICON_TEXT | wimp_ICON_HCENTRED | wimp_ICON_VCENTRED
			| wimp_ICON_INDIRECTED;
	InfoWin.work_flags = wimp_BUTTON_CLICK << wimp_ICON_BUTTON_TYPE_SHIFT;
	InfoWin.xmin = 16, InfoWin.ymin = 16;
	InfoWin.icon_count = 0;

	InfoWin.title_data.indirected_text.text = "About this program";
	InfoWin.title_data.indirected_text.validation = "";
	InfoWin.title_data.indirected_text.size = strlen(
			InfoWin.title_data.indirected_text.text);

	W = wimp_create_window(&InfoWin);

	Iflags = wimp_ICON_TEXT | wimp_ICON_VCENTRED | wimp_ICON_RJUSTIFIED
			| wimp_ICON_INDIRECTED
			| (wimp_COLOUR_BLACK << wimp_ICON_FG_COLOUR_SHIFT)
			| (wimp_COLOUR_LIGHT_GREY << wimp_ICON_BG_COLOUR_SHIFT);
	strncpy(InfoIcons[0].Text, "Name", InfoTextSize + 1);
	strncpy(InfoIcons[0].Validation, "", InfoTextSize + 1);
	strncpy(InfoIcons[1].Text, "Purpose", InfoTextSize + 1);
	strncpy(InfoIcons[1].Validation, "", InfoTextSize + 1);
	strncpy(InfoIcons[2].Text, "Author", InfoTextSize + 1);
	strncpy(InfoIcons[2].Validation, "", InfoTextSize + 1);
	strncpy(InfoIcons[3].Text, "Version", InfoTextSize + 1);
	strncpy(InfoIcons[3].Validation, "", InfoTextSize + 1);
	for (i = 0; i < 4; i++) {
		//strncpy(InfoIcons[i].Validation, "", 2); // Copying inside loop gives SegFaults when compiled with O2
		IconCreate(W, 4, 16 + 60 * i, 140, 44, Iflags, InfoIcons[i].Text, InfoTextSize + 1, InfoIcons[i].Validation);
	}

	Iflags = wimp_ICON_TEXT | wimp_ICON_BORDER | wimp_ICON_HCENTRED | wimp_ICON_VCENTRED
			| wimp_ICON_FILLED | wimp_ICON_INDIRECTED
			| (wimp_COLOUR_BLACK << wimp_ICON_FG_COLOUR_SHIFT)
			| (wimp_COLOUR_VERY_LIGHT_GREY << wimp_ICON_BG_COLOUR_SHIFT);
	strncpy(InfoIcons[4].Text, AppName, InfoTextSize + 1);
	strncpy(InfoIcons[4].Validation, "R2", InfoTextSize + 1);
	strncpy(InfoIcons[5].Text, AppPurpose, InfoTextSize + 1);
	strncpy(InfoIcons[5].Validation, "R2", InfoTextSize + 1);
	strncpy(InfoIcons[6].Text, AppAuthors, InfoTextSize + 1);
	strncpy(InfoIcons[6].Validation, "R2", InfoTextSize + 1);
	strncpy(InfoIcons[7].Text, AppVersion, InfoTextSize + 1);
	strncat(InfoIcons[7].Text, AppDate, InfoTextSize + 1 - sizeof(AppVersion));
	strncpy(InfoIcons[7].Validation, "R2", InfoTextSize + 1);
	for (i = 0; i < 4; i++) {
		j = i + 4;
		//strncpy(InfoIcons[j].Validation, "R2", InfoTextSize + 1); // Copying inside loop gives SegFaults when compiled with O2
		IconCreate(W, 152, 12 + 60 * i, 540, 52, Iflags, InfoIcons[j].Text, InfoTextSize + 1,
				InfoIcons[j].Validation);
	}

	/* Get the state of the dialog window to ensure it works correctly.
	 * Otherwise, Debugger crashes when the 'Info' entry in the icon menu is
	 * clicked. */ // UPDATE: now it apparently does not need it anymore?
	wimp_window_state state;
	state.w = W;
	wimp_get_window_state(&state);

	return W;
}

/* Generate the menu structure */
void InitialiseIconbarMenu() {
	wimp_w InfoWin;
	InfoWin = OpenInfoDialog();

	int i, j, c;
	char *aux;
	IconBarMenu = malloc(num_menu_options * sizeof(wimp_menu));
	strncpy(IconBarMenu->title_data.text, AppName, MenuEntryLen);
	IconBarMenu->title_fg = wimp_COLOUR_BLACK;
	IconBarMenu->title_bg = wimp_COLOUR_LIGHT_GREY;
	IconBarMenu->work_fg = wimp_COLOUR_BLACK;
	IconBarMenu->work_bg = wimp_COLOUR_WHITE;
	IconBarMenu->width = MenuWidth;
	IconBarMenu->height = MenuHeight;
	IconBarMenu->gap = MenuGap;

	for (i = 0; i < num_menu_options; i++) {
		if (i != (num_menu_options - 1))
			IconBarMenu->entries[i].menu_flags = 0;
		else
			IconBarMenu->entries[i].menu_flags = wimp_MENU_LAST;
		if (strcmp(menu_options[i], "Info") == 0) {
			IconBarMenu->entries[i].sub_menu = (wimp_menu *) InfoWin;
		} else if (strcmp(submenu_options[i], "") == 0) {
			IconBarMenu->entries[i].sub_menu = wimp_NO_SUB_MENU;
		} else {
			/* Count the number of submenu entries */
			c = 1;
			aux = strpbrk(submenu_options[i], submenu_separator);
			while (aux != NULL) {
				c++;
				aux = strpbrk(aux + 1, submenu_separator);
			}
			IconBarMenu->entries[i].sub_menu = malloc(c * sizeof(wimp_menu));
			strncpy(IconBarMenu->entries[i].sub_menu->title_data.text, menu_options[i],
					MenuEntryLen);
			IconBarMenu->entries[i].sub_menu->title_fg = wimp_COLOUR_BLACK;
			IconBarMenu->entries[i].sub_menu->title_bg = wimp_COLOUR_LIGHT_GREY;
			IconBarMenu->entries[i].sub_menu->work_fg = wimp_COLOUR_BLACK;
			IconBarMenu->entries[i].sub_menu->work_bg = wimp_COLOUR_WHITE;
			IconBarMenu->entries[i].sub_menu->width = MenuWidth;
			IconBarMenu->entries[i].sub_menu->height = MenuHeight;
			IconBarMenu->entries[i].sub_menu->gap = MenuGap;
			char* aux2 = strdup(submenu_options[i]);
			aux = strtok(aux2, submenu_separator);
			for (j = 0; j < c; j++) {
				if (j != (c - 1))
					IconBarMenu->entries[i].sub_menu->entries[j].menu_flags = 0;
				else
					IconBarMenu->entries[i].sub_menu->entries[j].menu_flags =
							wimp_MENU_LAST;
				IconBarMenu->entries[i].sub_menu->entries[j].sub_menu = wimp_NO_SUB_MENU;
				IconBarMenu->entries[i].sub_menu->entries[j].icon_flags = wimp_ICON_TEXT
						| wimp_ICON_VCENTRED | wimp_ICON_FILLED | wimp_ICON_TEXT
						| (wimp_COLOUR_BLACK << wimp_ICON_FG_COLOUR_SHIFT)
						| (wimp_COLOUR_WHITE << wimp_ICON_BG_COLOUR_SHIFT);
				strncpy(IconBarMenu->entries[i].sub_menu->entries[j].data.text, aux,
						MenuEntryLen);
				aux = strtok(NULL, submenu_separator);
			}
			free(aux2);
		}
		IconBarMenu->entries[i].icon_flags = wimp_ICON_TEXT | wimp_ICON_VCENTRED
				| wimp_ICON_FILLED | wimp_ICON_TEXT
				| (wimp_COLOUR_BLACK << wimp_ICON_FG_COLOUR_SHIFT)
				| (wimp_COLOUR_WHITE << wimp_ICON_BG_COLOUR_SHIFT);
		strncpy(IconBarMenu->entries[i].data.text, menu_options[i], MenuEntryLen);
	}
}

/* Clear the menu structure from memory */
void FreeIconbarMenu() {
	free(IconBarMenu);
}

/* OpenIconbarMenu opens a menu at the icon placement. */
void OpenIconbarMenu(wimp_pointer pt) {
	wimp_create_menu(IconBarMenu, pt.pos.x - 64, 96 + 2 * (MenuHeight + MenuGap));
}

