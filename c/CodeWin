/*
 * !UCDebug, ARM debugger for RISC OS.
 * https://github.com/fuentesp/UCDebug
 * Copyright (C) 2018  University of Cantabria
 *
 * !UCDebug was developed by the Computer Architecture and Technology
 * Group at the University of Cantabria. A comprehensive list of authors
 * can be found in the file AUTHORS.txt.
 *
 * You can reach the main developers at {fernando.vallejo, cristobal.camarero,
 * pablo.fuentes}@unican.es.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "oslib/wimp.h"
#include "oslib/wimpspriteop.h"
#include "oslib/debugger.h"

/* Added C libraries to avoid warnings due to declaration incompatibilities */
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#include "ibar.h"
#include "CodeWin.h"
#include "ConsWin.h"

/*Private Vars*/
struct CodeType *CodeIcons;

/* Aux Functions */

/* ColorPC receives a handle to the Code view window, the start address and the number
 * of instructions to print, and updates the icon from the current PC to highlight it
 * in a different color */
void ColorPC(wimp_w CodeWin, int StartAddr, int NumInstr) {
	int PC;
	int Line;

	PC = CurContext.Regs[15];
	Line = (PC - StartAddr) / 4;

	if ((Line >= 0) && (Line < NumInstr)) {
		ChTextFGColour(CodeWin, CodeIcons[Line].I_Addr, PC_FG_Colour);
		ChTextBGColour(CodeWin, CodeIcons[Line].I_Addr, PC_BG_Colour);
		ChTextFGColour(CodeWin, CodeIcons[Line].I_Code, PC_FG_Colour);
		ChTextBGColour(CodeWin, CodeIcons[Line].I_Code, PC_BG_Colour);
		ChTextFGColour(CodeWin, CodeIcons[Line].I_Disem, PC_FG_Colour);
		ChTextBGColour(CodeWin, CodeIcons[Line].I_Disem, PC_BG_Colour);
	}
}

/* ColorBrk receives a handle to the Code view window, the start address and the number
 * of instructions to print, and updates the icons from those lines with a breakpoint
 * set to highlight them in a different color. */
void ColorBrk(wimp_w CodeWin, int StartAddr, int NumInstr) {
	int i, Brk;
	int Line;

	for (i = 0; i < CurNumBr; i++) {
		Brk = BrkPtList[i];
		Line = (Brk - StartAddr) / 4;

		if ((Line >= 0) && (Line < NumInstr)) {
			ChTextFGColour(CodeWin, CodeIcons[Line].I_Addr, Brk_FG_Colour);
			ChTextBGColour(CodeWin, CodeIcons[Line].I_Addr, Brk_BG_Colour);
			ChTextFGColour(CodeWin, CodeIcons[Line].I_Code, Brk_FG_Colour);
			ChTextBGColour(CodeWin, CodeIcons[Line].I_Code, Brk_BG_Colour);
			ChTextFGColour(CodeWin, CodeIcons[Line].I_Disem, Brk_FG_Colour);
			ChTextBGColour(CodeWin, CodeIcons[Line].I_Disem, Brk_BG_Colour);
		}
	}
}

/* Public Functions */

/* Create a Code view window, showing the instructions currently loaded
 *  in memory and their interpretation */
wimp_w CodeWinCreate(int StartAddr, int NumInstr, int PosX, int PosY) {
	/* Local function vars */
	wimp_w CodeWin;
	int i, size, Addr, Code, *t_addr;
	char *aux;

	if (NumInstr < VisRows) NumInstr = VisRows;
	snprintf(CodeWinTitle, WinTitleSize, CodeWinName);
	CodeWin = open_window(CodeWinTitle, CodeWinSizeX, NumInstr * LinSizeY, PosX, PosY,
	CodeWinSizeX, CodeWinSizeY, 0, 0, 0x06);
	CodeIcons = malloc(sizeof(struct CodeType) * NumInstr);
	Addr = StartAddr;

	for (i = 0; i < NumInstr; i++) {
		/* Address */
		snprintf(CodeIcons[i].T_Addr, PrintedWordSize + 1, "0x%08X", Addr);
		/* Instruction Code*/
		t_addr = (int *) Addr;
		Code = *t_addr;
		snprintf(CodeIcons[i].T_Code, PrintedWordSize + 1, "0x%08X", Code);
		/*Instruction Disassembly */
		debugger_disassemble(Code, t_addr, &aux, &size);
		snprintf(CodeIcons[i].T_Disem, DisasInstrSize + 1, aux);
		CodeIcons[i].T_Disem[DisasInstrSize] = 0; // Append null char to ensure end of string
		Addr = Addr + 4;

		CodeIcons[i].I_Addr = TextIconCreate(CodeWin, 10, 5 + LinSizeY * i,
				CharSizeX * 10, CharSizeY, CodeIcons[i].T_Addr, PrintedWordSize + 1, CodeIcons[i].V_Addr);
		ChTextBGColour(CodeWin, CodeIcons[i].I_Addr, wimp_COLOUR_LIGHT_GREY);
		CodeIcons[i].I_Code = TextIconCreate(CodeWin, 20 + CharSizeX * 10,
				5 + LinSizeY * i, CharSizeX * 10, CharSizeY, CodeIcons[i].T_Code, PrintedWordSize + 1, CodeIcons[i].V_Code);
		ChTextBGColour(CodeWin, CodeIcons[i].I_Code, wimp_COLOUR_LIGHT_GREY);
		CodeIcons[i].I_Disem = TextIconCreate(CodeWin, 30 + CharSizeX * 20,
				5 + LinSizeY * i, CharSizeX * 40, CharSizeY, CodeIcons[i].T_Disem, DisasInstrSize + 1, CodeIcons[i].V_Disem);
		ChTextBGColour(CodeWin, CodeIcons[i].I_Disem, wimp_COLOUR_LIGHT_GREY);
	}

	return CodeWin;
}

/* Update the Code view window */
void CodeWinRedraw(wimp_w CodeWin, int StartAddr, int NumInstr) {
	int i, size, Addr, Code, *t_addr;
	char *aux;

	if (NumInstr < VisRows) NumInstr = VisRows;
	Addr = StartAddr;

	for (i = 0; i < NumInstr; i++) {
		/*Address*/
		snprintf(CodeIcons[i].T_Addr, PrintedWordSize + 1, "0x%08X", Addr);
		ChTextBGColour(CodeWin, CodeIcons[i].I_Addr, wimp_COLOUR_LIGHT_GREY);
		/*Instruction Code */
		t_addr = (int *) Addr;
		Code = *t_addr;
		snprintf(CodeIcons[i].T_Code, PrintedWordSize + 1, "0x%08X", Code);
		ChTextBGColour(CodeWin, CodeIcons[i].I_Code, wimp_COLOUR_LIGHT_GREY);
		/* Instruction Disassembly */
		debugger_disassemble(Code, t_addr, &aux, &size);
		snprintf(CodeIcons[i].T_Disem, DisasInstrSize + 1, aux);
		CodeIcons[i].T_Disem[DisasInstrSize] = 0; // Append null char to ensure end of string
		Addr = Addr + 4;
		ChTextBGColour(CodeWin, CodeIcons[i].I_Disem, wimp_COLOUR_LIGHT_GREY);
	}

	/* Highlight the PC and breakpoint instructions */
	ColorPC(CodeWin, StartAddr, NumInstr);
	ColorBrk(CodeWin, StartAddr, NumInstr);

	/* Redraw window */
	UpdateWindow(CodeWin);

}


/* Free all structures corresponding to the Code window */
void CodeWinTerminate() {
	free(CodeIcons);
}
