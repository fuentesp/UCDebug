/*
 * !UCDebug, ARM debugger for RISC OS.
 * https://github.com/fuentesp/UCDebug
 * Copyright (C) 2018  University of Cantabria
 *
 * !UCDebug was developed by the Computer Architecture and Technology
 * Group at the University of Cantabria. A comprehensive list of authors
 * can be found in the file AUTHORS.txt.
 *
 * You can reach the main developers at {fernando.vallejo, cristobal.camarero,
 * pablo.fuentes}@unican.es.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "oslib/wimp.h"
#include "oslib/wimpspriteop.h"
#include <string.h>
/* Added C libraries to avoid warnings */
#include <stdlib.h>

#include "ibar.h"
#include "main.h"
#include "ConsWin.h"
#include "Interpreter.h"

/*Private Types*/
struct ConsType {
	wimp_i I_Lines[ConsLinTot - 1];
	wimp_i I_Prompt;
	wimp_i I_LinInp;
	char T_Lines[ConsLinTot - 1][ConsLinSize + 1];
	char T_Prompt[PromptSize + 1];
	char T_LinInp[ConsLinSize - PromptSize + 1];
};

struct UsrConsType {
	wimp_i I_Lines[NumLinUsrCon];
	char T_Lines[NumLinUsrCon][NumColUsrCon + 1];

};

/*Private Vars*/
struct ConsType Console;
struct UsrConsType UsrCons;
char CommandBuffer[ComBufNumEntries][ConsLinSize + 1];
char PendingCommandBackup[ConsLinSize + 1];
int P_Buffer;
char CurPrompt[PromptSize + 1] = Prompt;
int UsrCursor;

/* ConsWinCreate opens a Console view window */
wimp_w ConsWinCreate(int PosX, int PosY) {
	/* Function vars */
	wimp_w ConsWin;
	wimp_icon_create icon_definition;
	int i;

	/* Initialize the command buffer */
	for (i = 0; i < ComBufNumEntries; i++) {
		strcpy(CommandBuffer[i], "");
	}
	P_Buffer = 0;

	ConsWin = open_window(ConsWinName, ConsWinSizeX, ConsLinTot * LinSizeY, PosX, PosY,
	ConsWinSizeX, ConsWinSizeY, 0, (ConsLinTot - ConsLinVis) * LinSizeY, 0x0E);

	for (i = 0; i < ConsLinTot - 1; i++) {
		strncpy(Console.T_Lines[i], "", ConsLinSize);
		Console.I_Lines[i] = TextIconCreate(ConsWin, 10, 5 + LinSizeY * i,
		CharSizeX * ConsLinSize, CharSizeY, Console.T_Lines[i]);
	}

	/* Define prompt icon */
	strncpy(Console.T_Prompt, CurPrompt, PromptSize);
	Console.I_Prompt = TextIconCreate(ConsWin, 10, 5 + LinSizeY * (ConsLinTot - 1),
	CharSizeX * PromptSize, CharSizeY, Console.T_Prompt);

	strcpy(Console.T_LinInp, "");
	icon_definition.w = ConsWin;
	icon_definition.icon.extent.x0 = 10 + CharSizeX * PromptSize;
	icon_definition.icon.extent.y0 = -(5 + LinSizeY * (ConsLinTot - 1) + CharSizeY);
	icon_definition.icon.extent.x1 = 10 + ConsLinSize * CharSizeX;
	icon_definition.icon.extent.y1 = -(5 + LinSizeY * (ConsLinTot - 1));
	icon_definition.icon.flags = wimp_ICON_TEXT | wimp_ICON_VCENTRED | wimp_ICON_FILLED
			| wimp_ICON_INDIRECTED | (wimp_BUTTON_WRITABLE << wimp_ICON_BUTTON_TYPE_SHIFT)
			| (wimp_COLOUR_BLACK << wimp_ICON_FG_COLOUR_SHIFT)
			| (wimp_COLOUR_VERY_LIGHT_GREY << wimp_ICON_BG_COLOUR_SHIFT);

	icon_definition.icon.data.indirected_text.text = Console.T_LinInp;
	icon_definition.icon.data.indirected_text.size = ConsLinSize - PromptSize;
	icon_definition.icon.data.indirected_text.validation = "";

	Console.I_LinInp = wimp_create_icon(&icon_definition);
	wimp_set_caret_position(ConsWin, Console.I_LinInp, 94, -3200, 34, 0); /* Place prompt at the beginning */
	return ConsWin;
}

/* ConsEnterKey is called when the Enter key has been pressed, and analyzes the input
 * command. */
void ConsEnterKey(wimp_w ConsWin) {
	int i;
	char line[ConsLinSize + 1];

	/* First scroll the command view */
	for (i = 0; i < ConsLinTot - 2; i++) {
		strcpy(Console.T_Lines[i], Console.T_Lines[i + 1]);
	}

	/* Copy the input to the command buffer, unless line is empty or same as previous.
	 * First, initialize the command buffer. */
	if ((strcmp(Console.T_LinInp, "") != 0)
			&& (strcmp(CommandBuffer[0], Console.T_LinInp) != 0)) {
		for (i = ComBufNumEntries - 1; i > 0; i--) {
			strcpy(CommandBuffer[i], CommandBuffer[i - 1]);
		}
		strcpy(CommandBuffer[0], Console.T_LinInp);
	}
	P_Buffer = 0;

	/* Copy input, clear prompt line and call CLI */
	strcpy(Console.T_Lines[ConsLinTot - 2], Console.T_Prompt);
	strcat(Console.T_Lines[ConsLinTot - 2], Console.T_LinInp);
	strncpy(line, Console.T_LinInp, sizeof(line));
	strcpy(Console.T_LinInp, "");
	wimp_set_caret_position(ConsWin, Console.I_LinInp, 94, -3200, 34, 0);
	UpdateWindow(ConsWin);
	interpreter(line);

	/* Write a new prompt, placing caret at the beginning of the line */
	strncpy(Console.T_Prompt, CurPrompt, PromptSize);
	wimp_set_caret_position(ConsWin, Console.I_LinInp, 94, -3200, 34, 0);

	/* Redraw window */
	UpdateWindow(ConsWin);
}

/* Activate the command window to be ready to receive characters */
void ActivateCons(wimp_w ConsWin) {
	int lineSize;

	lineSize = strlen(Console.T_LinInp);
	wimp_set_caret_position(ConsWin, Console.I_LinInp, 94 + 18 * lineSize, -3200, 34,
			lineSize);
}

/* If the "Up" key is pressed, retrieve command from the command buffer */
void ConsUpKey(wimp_w ConsWin) {
	int lineSize;

	if (P_Buffer == 0) /* Store current command line in a backup var */
		strcpy(PendingCommandBackup, Console.T_LinInp);

	if ((P_Buffer < ComBufNumEntries) && (strcmp(CommandBuffer[P_Buffer], "") != 0)) {
		/* Change command line */
		strcpy(Console.T_LinInp, CommandBuffer[P_Buffer]);
		lineSize = strlen(Console.T_LinInp);
		wimp_set_caret_position(ConsWin, Console.I_LinInp, 94 + 18 * lineSize, -3200, 34,
				lineSize);

		/* Redraw window */
		UpdateWindow(ConsWin);

		/* Update position within the buffer */
		P_Buffer++;
	}
}

/* If the "Down" key is pressed, retrieve next command in the command buffer (this only
 * has effect if already traversing the command buffer). */
void ConsDownKey(wimp_w ConsWin) {
	int lineSize;

	if (P_Buffer > 0) {
		if (P_Buffer == 1) {
			/* If P_Buffer is 1 (last command in buffer), retrieve the pending command */
			strcpy(Console.T_LinInp, PendingCommandBackup);
		} else {
		/* Change command line, only if current command has already been retrieved from
		 * buffer. */
		strcpy(Console.T_LinInp, CommandBuffer[P_Buffer - 2]);
		}

		lineSize = strlen(Console.T_LinInp);
		wimp_set_caret_position(ConsWin, Console.I_LinInp, 94 + 18 * lineSize, -3200, 34,
				lineSize);

		/* Redraw window */
		UpdateWindow(ConsWin);

		/* Update position within the buffer */
		P_Buffer--;
	}
}

/* If the "Escape" key is pressed, clear the current command in the command line. */
void ConsEscapeKey(wimp_w ConsWin) {
	P_Buffer = 0; // Reset from traversing the command buffer
	strcpy(PendingCommandBackup, ""); // Clear pending command
	strcpy(Console.T_LinInp, ""); // Clear current command
	int lineSize = strlen(Console.T_LinInp);
	wimp_set_caret_position(ConsWin, Console.I_LinInp, 94 + 18 * lineSize, -3200, 34,
		lineSize);
	UpdateWindow(ConsWin); // Redraw the window
}

/* Gains the input focus to the Console window (useful to be called from outside to get focus) */
void ConsSetActive(wimp_w ConsWin) {
	wimp_set_caret_position(ConsWin, Console.I_LinInp, 94, -3200, 34, 0);
}

/* ConsWrite prints in the Console window a given message (used for warnings and to
 * output requested info). This function does not alter the current command being input */
void ConsWrite(wimp_w ConsWin, char *text) {
	int i;

	/* First scroll the command view */
	for (i = 0; i < ConsLinTot - 2; i++) {
		strcpy(Console.T_Lines[i], Console.T_Lines[i + 1]);
	}

	/* Copy the given text in the last line */
	strncpy(Console.T_Lines[ConsLinTot - 2], text,
			sizeof(Console.T_Lines[ConsLinTot - 2]));

	/* Redraw window */
	UpdateWindow(ConsWin);

}

/* Function to set the command prompt to RUN mode (small workaround to print RUN when
 the go command is executed) */
void SetPrompt(char prompt[]) {
	strncpy(CurPrompt, prompt, PromptSize);
	strncpy(Console.T_Prompt, CurPrompt, PromptSize);
	UpdateWindow(ConsWin);
}

/* UsrWinCreate generates a User Console window, used to interact with the user during
 * the execution of the user program through the corresponding SWIs. */
wimp_w UsrWinCreate(int PosX, int PosY) {
	wimp_w UsrWin;
	wimp_icon_create icon_definition;
	int i;

	UsrWin = open_window(UsrWinName, NumColUsrCon * CharSizeX, NumLinUsrCon * LinSizeY,
			PosX, PosY, UsrConsWinSizeX, UsrConsWinSizeY, 0,
			(NumLinUsrCon - 10) * LinSizeY, 0x01E);

	/* Initialize the window with empty lines */
	for (i = 0; i < NumLinUsrCon; i++) {
		strncpy(UsrCons.T_Lines[i], "", ConsLinSize);
		UsrCons.I_Lines[i] = TextIconCreate(UsrWin, 10, 5 + LinSizeY * i,
		CharSizeX * NumColUsrCon, CharSizeY, UsrCons.T_Lines[i]);
	}
	UsrCursor = 0;
	WindowStates[UsrWinOffset] = wss_ON_SCREEN;

	return UsrWin;
}

/* UsrScroll scrolls one line the User Console window */
void UsrScroll() {
	int i;
	for (i = 0; i < NumLinUsrCon - 1; i++)
		strcpy(UsrCons.T_Lines[i], UsrCons.T_Lines[i + 1]);
}

/* UsrWrite writes at the last line of the User Console. It does not print an End-of-Line
 * until the character 0x0A is read. Non-printable characters (below 0x20) are
 * represented with a dot. */
void UsrWrite(wimp_w UsrWin, char *text) {
	int i, len = strlen(text);
	char c;

	for (i = 0; i < len; i++) {
		c = text[i];
		if ((c == (char) 0x0A) || (UsrCursor == NumColUsrCon)) {
			UsrCons.T_Lines[NumLinUsrCon - 1][UsrCursor] = (char) 0x00;
			UsrScroll();
			UsrCursor = 0;
		}
		if (c != (char) 0x0A) {
			if (c < 0x20) c = '.';
			UsrCons.T_Lines[NumLinUsrCon - 1][UsrCursor] = c;
			UsrCursor++;
		}
	}
	UsrCons.T_Lines[NumLinUsrCon - 1][UsrCursor] = (char) 0x00;

	/* Redraw window */
	UpdateWindow(UsrWin);
}
