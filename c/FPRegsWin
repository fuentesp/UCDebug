/*
 * !UCDebug, ARM debugger for RISC OS.
 * https://github.com/fuentesp/UCDebug
 * Copyright (C) 2018  University of Cantabria
 *
 * !UCDebug was developed by the Computer Architecture and Technology
 * Group at the University of Cantabria. A comprehensive list of authors
 * can be found in the file AUTHORS.txt.
 *
 * You can reach the main developers at {fernando.vallejo, cristobal.camarero,
 * pablo.fuentes}@unican.es.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "oslib/wimp.h"
#include "oslib/wimpspriteop.h"
#include <string.h>
/* Added C libraries to avoid warnings */
#include <stdio.h>
#include <stdlib.h>

#include "ibar.h"
#include "main.h"
#include "FPRegsWin.h"

/*Private Vars*/
struct FPRegType FPRegsIcons[34];

/* FPRegsWinCreate opens a Floating-Point Registers view window, showing the value of the VFP registers*/
wimp_w FPRegsWinCreate(int PosX, int PosY) {
	wimp_w FPRegsWin;
	int i, j;

	FPRegsWin = open_window(FPRegsWinName, FPRegsWinSizeX, FPRegsWinSizeY, PosX, PosY,
			FPRegsWinSizeX, FPRegsWinSizeY, 0, 0, 0x06);

	if (FPdispDoublePrec) {
		/* Display double precision regs */
		for (i = 0; i < 16; i += 1) {
			snprintf(FPRegsIcons[i].T_Name, 6, "d%d", i);
			FPRegsIcons[i].I_Name = TextIconCreate(FPRegsWin, 7, 5 + LinSizeY * 2 * i,
					CharSizeX * 6, CharSizeY, FPRegsIcons[i].T_Name, FPRegNameSize + 1, FPRegsIcons[i].V_Name);
			ChTextBGColour(FPRegsWin, FPRegsIcons[i].I_Name, wimp_COLOUR_LIGHT_GREY);
			/* In double precision, even single-precision registers map to the least significant part of the
			 value, and odd single-precision registers map to the most significant part*/
			FPRegsIcons[2 * i].I_Val = TextIconCreate(FPRegsWin, 15 + CharSizeX * 6,
					5 + LinSizeY * 2 * i, CharSizeX * PrintedWordSize, CharSizeY,
					FPRegsIcons[2 * i + 1].T_Val, PrintedWordSize + 1, FPRegsIcons[2 * i + 1].V_Val);
			ChTextBGColour(FPRegsWin, FPRegsIcons[2 * i].I_Val, wimp_COLOUR_LIGHT_GREY);
			FPRegsIcons[2 * i + 1].I_Val = TextIconCreate(FPRegsWin,
					25 + CharSizeX * (PrintedWordSize + 6), 5 + LinSizeY * 2 * i,
					CharSizeX * PrintedWordSize, CharSizeY, FPRegsIcons[2 * i].T_Val, PrintedWordSize + 1, FPRegsIcons[2 * i].V_Val);
			ChTextBGColour(FPRegsWin, FPRegsIcons[2 * i + 1].I_Val, wimp_COLOUR_LIGHT_GREY);
			FPRegsIcons[i].I_FPval = TextIconCreate(FPRegsWin, 15 + CharSizeX * 6,
					5 + LinSizeY * (2 * i + 1), CharSizeX * PrintedDoubleSize + 10,
					CharSizeY, FPRegsIcons[i].T_FPval, PrintedFloatSize + 1, FPRegsIcons[i].V_FPval);
			ChTextBGColour(FPRegsWin, FPRegsIcons[i].I_FPval, wimp_COLOUR_LIGHT_GREY);
		}
	} else {
		/* Display single precision regs */
		for (i = 0; i < 32; i++) {
			snprintf(FPRegsIcons[i].T_Name, 6, "s%d", i);
			/* Create the icons of registers 0 - 31 (single-value FP regs) */
			FPRegsIcons[i].I_Name = TextIconCreate(FPRegsWin, 7, 5 + LinSizeY * i,
					CharSizeX * 6, CharSizeY, FPRegsIcons[i].T_Name, FPRegNameSize + 1, FPRegsIcons[i].V_Name);
			ChTextBGColour(FPRegsWin, FPRegsIcons[i].I_Name, wimp_COLOUR_LIGHT_GREY);
			FPRegsIcons[i].I_Val = TextIconCreate(FPRegsWin, 15 + CharSizeX * 6,
					5 + LinSizeY * i, CharSizeX * PrintedWordSize, CharSizeY,
					FPRegsIcons[i].T_Val, PrintedWordSize + 1, FPRegsIcons[i].V_Val);
			ChTextBGColour(FPRegsWin, FPRegsIcons[i].I_Val, wimp_COLOUR_LIGHT_GREY);
			FPRegsIcons[i].I_FPval = TextIconCreate(FPRegsWin,
					25 + CharSizeX * (PrintedWordSize + 6), 5 + LinSizeY * i,
					CharSizeX * PrintedFloatSize, CharSizeY, FPRegsIcons[i].T_FPval, PrintedFloatSize + 1, FPRegsIcons[i].V_FPval);
			ChTextBGColour(FPRegsWin, FPRegsIcons[i].I_FPval, wimp_COLOUR_LIGHT_GREY);
		}
	}

	/* Create the icons for the FCPSR and its flags */
	strncpy(FPRegsIcons[32].T_Name, "FPSCR", 6);
	strncpy(FPRegsIcons[33].T_Name, "FLAGS", 6);
	for (i = 32; i < 34; i++) {
		FPRegsIcons[i].I_Name = TextIconCreate(FPRegsWin, 7, 20 + LinSizeY * i,
				CharSizeX * 6, CharSizeY, FPRegsIcons[i].T_Name, FPRegNameSize + 1, FPRegsIcons[i].V_Name);
		ChTextBGColour(FPRegsWin, FPRegsIcons[i].I_Name, wimp_COLOUR_LIGHT_GREY);
		FPRegsIcons[i].I_Val = TextIconCreate(FPRegsWin, 15 + CharSizeX * 6,
				20 + LinSizeY * i, CharSizeX * 10, CharSizeY, FPRegsIcons[i].T_Val, PrintedWordSize + 1, FPRegsIcons[i].V_Val);
		ChTextBGColour(FPRegsWin, FPRegsIcons[i].I_Val, wimp_COLOUR_LIGHT_GREY);
	}

	FPRegsWinRedraw(FPRegsWin);
	WindowStates[FPRegsWinOffset] = wss_ON_SCREEN; /* Mark the FP regs window as active */

	return FPRegsWin;
}

/* RegsWinRedraw updates the Register view window */
void FPRegsWinRedraw(wimp_w FPRegsWin) {
	int i;

	/* Register value within current context */
	for (i = 0; i < 32; i++)
		snprintf(FPRegsIcons[i].T_Val, PrintedWordSize + 1, "0x%08X",
				*(long*) &CurContext.FPRegs[i]);

	if (FPdispDoublePrec) { /* Display values in double precision */
		for (i = 0; i < 16; i++)
			snprintf(FPRegsIcons[i].T_FPval, PrintedDoubleSize + 1, "%*.13E",
					PrintedDoubleSize - 2, *((double *) &(CurContext.FPRegs[2 * i])));
	} else { /* Simple precision */
		for (i = 0; i < 32; i++)
			snprintf(FPRegsIcons[i].T_FPval, PrintedFloatSize + 1, "%*.6E",
					PrintedFloatSize - 2, CurContext.FPRegs[i]);
	}

	/* Display the FPSCR and the flags (from the FPSCR) */
	snprintf(FPRegsIcons[32].T_Val, PrintedWordSize, "0x%08X", CurContext.FPSCR);

	strcpy(FPRegsIcons[33].T_Val, "----");
	if ((CurContext.FPSCR & 0x80000000) != 0) FPRegsIcons[33].T_Val[0] = 'N';
	if ((CurContext.FPSCR & 0x40000000) != 0) FPRegsIcons[33].T_Val[1] = 'Z';
	if ((CurContext.FPSCR & 0x20000000) != 0) FPRegsIcons[33].T_Val[2] = 'C';
	if ((CurContext.FPSCR & 0x10000000) != 0) FPRegsIcons[33].T_Val[3] = 'V';

	/* Update window */
	UpdateWindow(FPRegsWin);
}

void ToggleWinDisplay(wimp_w FPRegsWin) {
	int i;
	if (FPdispDoublePrec) { /* Change from simple to double precision */
		for (i = 0; i < 32; i++) {
			wimp_delete_icon(FPRegsWin, FPRegsIcons[i].I_Name);
			wimp_delete_icon(FPRegsWin, FPRegsIcons[i].I_Val);
			wimp_delete_icon(FPRegsWin, FPRegsIcons[i].I_FPval);
		}
		for (i = 0; i < 16; i += 1) {
			snprintf(FPRegsIcons[i].T_Name, 6, "d%d", i);
			FPRegsIcons[i].I_Name = TextIconCreate(FPRegsWin, 7, 5 + LinSizeY * 2 * i,
					CharSizeX * 6, CharSizeY, FPRegsIcons[i].T_Name, FPRegNameSize + 1, FPRegsIcons[i].V_Name);
			ChTextBGColour(FPRegsWin, FPRegsIcons[i].I_Name, wimp_COLOUR_LIGHT_GREY);
			/* In double precision, even single-precision registers map to the least significant part of the
			 value, and odd single-precision registers map to the most significant part*/
			FPRegsIcons[2 * i].I_Val = TextIconCreate(FPRegsWin, 15 + CharSizeX * 6,
					5 + LinSizeY * 2 * i, CharSizeX * PrintedWordSize, CharSizeY,
					FPRegsIcons[2 * i + 1].T_Val, PrintedWordSize + 1, FPRegsIcons[2 * i + 1].V_Val);
			ChTextBGColour(FPRegsWin, FPRegsIcons[2 * i].I_Val, wimp_COLOUR_LIGHT_GREY);
			FPRegsIcons[2 * i + 1].I_Val = TextIconCreate(FPRegsWin,
					25 + CharSizeX * (PrintedWordSize + 6), 5 + LinSizeY * 2 * i,
					CharSizeX * PrintedWordSize, CharSizeY, FPRegsIcons[2 * i].T_Val, PrintedWordSize + 1, FPRegsIcons[2 * i].V_Val);
			ChTextBGColour(FPRegsWin, FPRegsIcons[2 * i + 1].I_Val,
					wimp_COLOUR_LIGHT_GREY);
			FPRegsIcons[i].I_FPval = TextIconCreate(FPRegsWin, 15 + CharSizeX * 6,
					5 + LinSizeY * (2 * i + 1), CharSizeX * PrintedDoubleSize + 10,
					CharSizeY, FPRegsIcons[i].T_FPval, PrintedFloatSize + 1, FPRegsIcons[i].V_FPval);
			ChTextBGColour(FPRegsWin, FPRegsIcons[i].I_FPval, wimp_COLOUR_LIGHT_GREY);
		}
	} else { /* Change from double to simple precision */
		for (i = 0; i < 16; i += 1) {
			wimp_delete_icon(FPRegsWin, FPRegsIcons[i].I_Name);
			wimp_delete_icon(FPRegsWin, FPRegsIcons[2 * i].I_Val);
			wimp_delete_icon(FPRegsWin, FPRegsIcons[2 * i + 1].I_Val);
			wimp_delete_icon(FPRegsWin, FPRegsIcons[i].I_FPval);
		}
		for (i = 0; i < 32; i++) {
			snprintf(FPRegsIcons[i].T_Name, 6, "s%d", i);
			/* Create the icons of registers 0 - 31 (single-value FP regs) */
			FPRegsIcons[i].I_Name = TextIconCreate(FPRegsWin, 7, 5 + LinSizeY * i,
					CharSizeX * 6, CharSizeY, FPRegsIcons[i].T_Name, FPRegNameSize + 1, FPRegsIcons[i].V_Name);
			ChTextBGColour(FPRegsWin, FPRegsIcons[i].I_Name, wimp_COLOUR_LIGHT_GREY);
			FPRegsIcons[i].I_Val = TextIconCreate(FPRegsWin, 15 + CharSizeX * 6,
					5 + LinSizeY * i, CharSizeX * PrintedWordSize, CharSizeY,
					FPRegsIcons[i].T_Val, PrintedWordSize + 1, FPRegsIcons[i].V_Val);
			ChTextBGColour(FPRegsWin, FPRegsIcons[i].I_Val, wimp_COLOUR_LIGHT_GREY);
			FPRegsIcons[i].I_FPval = TextIconCreate(FPRegsWin,
					25 + CharSizeX * (PrintedWordSize + 6), 5 + LinSizeY * i,
					CharSizeX * PrintedFloatSize, CharSizeY, FPRegsIcons[i].T_FPval, PrintedFloatSize + 1, FPRegsIcons[i].V_FPval);
			ChTextBGColour(FPRegsWin, FPRegsIcons[i].I_FPval, wimp_COLOUR_LIGHT_GREY);
		}
	}
}
