/*
 * !UCDebug, ARM debugger for RISC OS.
 * https://github.com/fuentesp/UCDebug
 * Copyright (C) 2018  University of Cantabria
 *
 * !UCDebug was developed by the Computer Architecture and Technology
 * Group at the University of Cantabria. A comprehensive list of authors
 * can be found in the file AUTHORS.txt.
 *
 * You can reach the main developers at {fernando.vallejo, cristobal.camarero,
 * pablo.fuentes}@unican.es.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "oslib/wimp.h"
/* Added C libraries to avoid warnings */
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#include "CodeWin.h"
#include "DataWin.h"
#include "RegsWin.h"
#include "FPRegsWin.h"
#include "ConsWin.h"
#include "ibar.h"
#include "main.h"

/* Global variables  */
char DEBUG_AREA[DebugAreaSize];
struct ContextType CurContext;
int CurUsrContext[18];
int LastShownContext[18];
int BrkPtList[MaxBrPoints];
int CurNumBr = 0;
int GTBrkP;
int ExecType = Stop_Ex;
int AddrElfFile;
int AddrCodeStart;
int AddrCodeCur;
int AddrCodeEnd;
int AddrDataStart;
int AddrDataCur;
int DebugAreaStart;
int DebugAreaEnd;
osbool mainQuitFlag = FALSE;
int memDispType = 0;
enum WinScreenStatus WindowStates[6] = { wss_ON_SCREEN, wss_ON_SCREEN, wss_ON_SCREEN,
		wss_ON_SCREEN, wss_CLOSED, wss_CLOSED };
int NumWindows = 6;
osbool FPdispDoublePrec = FALSE;
wimp_t AppTask;

/* Handle to the different windows */
wimp_w CodeWin; /* Code view window */
wimp_w DataWin; /* Memory view window */
wimp_w RegsWin; /* Window to show the content of the CPU registers */
wimp_w ConsWin; /* Console window */
wimp_w UsrWin; /* User Console window */
wimp_w FPRegsWin; /* Window to show the content of the registers from the Floating Point coprocessor */
wimp_w* WinHandles[6] = { &CodeWin, &DataWin, &RegsWin, &ConsWin, &UsrWin, &FPRegsWin };

/* Declaration of local functions */
static void main_initialize(void);
static void main_terminate(void);
static osbool main_message_quit(wimp_message *message);

/* Message strings */
#define TOO_MANY_BRKPTS_MSG "Too many breakpoints"

/* Main function code */
int main(int argc, char *argv[]) {
	int i;

	main_initialize();
	wimp_message_list *mlist;
	mlist = malloc(sizeof(int) * 2);
	mlist->messages[0] = message_ICONISE;
	mlist->messages[1] = message_ICONISE_AT;
	wimp_add_messages(mlist);

	/* Fill up the debug area with random garbage data */
	for (i = 0; i < DebugAreaSize; i++) {
		DEBUG_AREA[i] = (char) (rand() % 0x100);
	}

	/* Initialize the debugging vars */
	DebugAreaStart = (int) &DEBUG_AREA;
	DebugAreaEnd = DebugAreaStart + DebugAreaSize;
	if (DebugAreaStart - (DebugAreaStart & AddrMask) > OffElfFile)
		AddrElfFile = (DebugAreaStart & AddrMask) + AddrMask + OffElfFile;
	else
		AddrElfFile = (DebugAreaStart & AddrMask) + OffElfFile;
	AddrCodeStart = AddrElfFile + (OffStartCode - OffElfFile);
	AddrCodeCur = AddrCodeStart;
	AddrCodeEnd = AddrCodeStart;
	AddrDataStart = AddrElfFile + (OffStartData - OffElfFile);
	AddrDataCur = AddrDataStart;

	/* Initialize the registers with their current value */
	DefCurCtx();
	UpdateLastShownCtx();

	/* Open the basic windows from the debugger */
	CodeWin = CodeWinCreate(AddrCodeCur, NumLinCode, PosXCodeWin, PosYCodeWin);
	DataWin = DataWinCreate(AddrDataCur, 25, 0, PosXDataWin, PosYDataWin);
	RegsWin = RegsWinCreate(PosXRegsWin, PosYRegsWin);
	ConsWin = ConsWinCreate(PosXConsWin, PosYConsWin);

	/* Print current available area - must be deleted for final version */
/*	char aux_msg[ConsLinSize];
	 snprintf(aux_msg, sizeof(aux_msg), "AREA START: 0x%08X  AREA END: 0x%08X",
	 &DEBUG_AREA, &CurContext);
	 ConsWrite(ConsWin, aux_msg);*/

	/* Enter the polling function that checks CLI and acts accordingly */
	while (!mainQuitFlag) {
		mainPoll();
	}
	main_terminate();
	return 0;
}

static void main_initialize(void) {
	AppTask = wimp_initialise(wimp_VERSION_RO3, AppName, NULL, NULL);
	ibar_initialise();
}

/* ToggleBrk toggles a breakpoint at the specified address */
void ToggleBrk(int DirBrk) {
	int i, j;
	osbool brkRemoved = FALSE;

	/* If a breakpoint is set at the given address, then clear it */
	for (i = 0; i < CurNumBr; i++)
		if (BrkPtList[i] == DirBrk) {
			for (j = i; j < CurNumBr - 1; j++)
				BrkPtList[j] = BrkPtList[j + 1];
			CurNumBr--;
			brkRemoved = TRUE;
		}
	/* Otherwise, set a breakpoint at the address */
	if (brkRemoved == FALSE) if (CurNumBr < MaxBrPoints) {
		BrkPtList[CurNumBr] = DirBrk;
		CurNumBr++;
	} else {
		ConsWrite(ConsWin, TOO_MANY_BRKPTS_MSG);
	}
}

/* ClrBrk clears all breakpoints */
void ClrBrk() {
	CurNumBr = 0;
}

/* PrintBrk prints at the console window the list of breakpoints currently set */
void PrintBrk() {
	int i;
	char aux[PrintedWordSize + 1];
	char line[ConsLinSize - 1];

	snprintf(line, sizeof(line), "%d BreakPoints", CurNumBr);
	ConsWrite(ConsWin, line);
	strcpy(line, "");
	for (i = 0; i < CurNumBr; i++) {
		snprintf(aux, sizeof(aux), "0x%08X", BrkPtList[i]);
		strncat(line, aux, sizeof(line) - strlen(line));
		if ((((i + 1) % 4) == 0) || (i + 1) == CurNumBr) {
			ConsWrite(ConsWin, line);
			strcpy(line, "");
		} else {
			strncat(line, "    ", sizeof(line) - strlen(line));
		}
	}
}

/* mainPoll checks any inputs by the user and acts accordingly */
void mainPoll(void) {
	wimp_block block;
	wimp_event_no reason;
	int pollword, i, j;
	wimp_window_info *Info;
	char msg[ConsLinSize];

	reason = wimp_poll(0, &block, &pollword);
	switch (reason) {
		case wimp_OPEN_WINDOW_REQUEST: /* reason=2 */
			wimp_open_window((wimp_open *) &block);
			if (block.open.next == (wimp_w) - 3) { /* Iconise window */
				/* Track status of iconised windows */
				for (i = 0; i < NumWindows; i++) {
					if (block.open.w == *(WinHandles[i])) {
						if (WindowStates[i] != wss_CONS_WIN_ATTACHED)
							WindowStates[i] = wss_OFF_SCREEN;
						else {
							for (j = i + 1; j < NumWindows; j++) {
								if (WindowStates[j] == wss_CONS_WIN_ATTACHED) {
									IconiseWindow(*(WinHandles[j]));
									break;
								}
							}
						}
						break;
					}
				}
				if (block.open.w == ConsWin) {
					/* If the 'back' icon is clicked in the Console window, send to background
					 all the windows that are not currently iconised. In order to iconise
					 properly, it need to be done in cascade: each iconised window
					 receives the event to get hidden and in its turn iconises the following.
					 (Apparently, Wimp cannot handle more than one iconisation process
					 at a time) */
					j = -1;
					for (i = 0; i < NumWindows; i++) {
						if (WindowStates[i] == wss_ON_SCREEN) {
							WindowStates[i] = wss_CONS_WIN_ATTACHED;
							if (j == -1) j = i; // Track first window to iconise
						}
					}
					if (j != -1) IconiseWindow(*(WinHandles[j]));
				}
			} else if (block.open.next == (wimp_w) - 1) { //De-iconise window
			/* Track status of de-iconised windows */
				for (i = 0; i < NumWindows; i++) {
					if (block.open.w == *(WinHandles[i])) {
						WindowStates[i] = wss_ON_SCREEN;
						break;
					}
				}
				if (block.open.w == ConsWin) {
					/* If the Console window is de-iconised, it brings back to
					 foreground all the windows that were iconised with it */
					ConsSetActive(ConsWin); // Gain the input focus
					for (i = 0; i < NumWindows; i++) {
						if (WindowStates[i] == wss_CONS_WIN_ATTACHED) {
							WindowStates[i] = wss_ON_SCREEN;
							ResetWindow(*(WinHandles[i]), -1, -1, -1, -1, -1, -1, (wimp_w) - 1);
						}
					}
				}
			}
			break;

		case wimp_CLOSE_WINDOW_REQUEST: /* reason=3 */
			if (block.close.w == ConsWin) {
				FreeIconbarMenu();
				mainQuitFlag = TRUE;
			}
			if (block.close.w == UsrWin && WindowStates[UsrWinOffset] == wss_ON_SCREEN) {
				wimp_close_window(UsrWin);
				WindowStates[UsrWinOffset] = wss_CLOSED;
			}
			if (block.close.w == FPRegsWin) {
				wimp_close_window(FPRegsWin);
				WindowStates[FPRegsWinOffset] = wss_CLOSED;
			}
			break;

		case wimp_USER_MESSAGE_RECORDED:
		case wimp_USER_MESSAGE_ACKNOWLEDGE:
		case wimp_USER_MESSAGE:
			if (block.message.action == message_QUIT) {
				FreeIconbarMenu();
				mainQuitFlag = TRUE;
			}
			break;

		case wimp_POINTER_LEAVING_WINDOW: /* reason=4 */
			break;

		case wimp_POINTER_ENTERING_WINDOW: /* reason=5 */
			break;

		case wimp_MOUSE_CLICK: /* reason=6 */
			if (block.pointer.w == CodeWin) {
				/* Click at the Code view window: with left button, scroll forward the
				 * 	addresses; with right button, scroll backwards; with wheel button,
				 * 	toggle breakpoint. */
				if ((block.pointer.buttons == wimp_CLICK_SELECT)
						&& validMemAddressRange(AddrCodeCur + (VisRows - 2) * 4))
					AddrCodeCur = AddrCodeCur + (VisRows - 2) * 4;
				if ((block.pointer.buttons == wimp_CLICK_ADJUST)
						&& validMemAddressRange(AddrCodeCur - (VisRows - 2) * 4))
					AddrCodeCur = AddrCodeCur - (VisRows - 2) * 4;
				if (block.pointer.buttons == wimp_CLICK_MENU) {
					for (i = 0; i < NumLinCode; i++)
						if ((block.pointer.i == CodeIcons[i].I_Addr)
								|| (block.pointer.i == CodeIcons[i].I_Code)
								|| (block.pointer.i == CodeIcons[i].I_Disem))
							ToggleBrk(AddrCodeCur + 4 * i);
				}
				CodeWinRedraw(CodeWin, AddrCodeCur, NumLinCode);
			} else if (block.pointer.w == DataWin) {
				/* Click at the Memory window: left button to advance the addresses shown,
				 * 	right button to move backwards, and click button to toggle the size
				 * 	of the display blocks. */
				if ((block.pointer.buttons == wimp_CLICK_SELECT)
						&& validMemAddressRange(AddrDataCur + (VisRows - 2) * 16))
					AddrDataCur = AddrDataCur + (VisRows - 2) * 16;
				if ((block.pointer.buttons == wimp_CLICK_ADJUST)
						&& validMemAddressRange(AddrDataCur - (VisRows - 2) * 16))
					AddrDataCur = AddrDataCur - (VisRows - 2) * 16;
				if (block.pointer.buttons == wimp_CLICK_MENU)
					memDispType = (memDispType + 1) % 3;
				DataWinRedraw(DataWin, AddrDataCur, 25, memDispType);
			} else if (block.pointer.w == RegsWin) {
				/* Click at the Register window, it updates the window */
				RegsWinRedraw(RegsWin);
			} else if (block.pointer.w == ConsWin) {
				/* Click at the Console window, activates the window to capture keyboard
				 * 	inputs */
				ActivateCons(ConsWin);
			} else if (block.pointer.w == FPRegsWin) {
				if (block.pointer.buttons == wimp_CLICK_MENU) {
					/* Wheel-button click at the FP registers window, it toggles between
					 simple and double precision */
					FPdispDoublePrec = !FPdispDoublePrec;
					ToggleWinDisplay(FPRegsWin);
					FPRegsWinRedraw(FPRegsWin);
				}
			} else if (block.pointer.w == wimp_ICON_BAR) {
				/* Click at the IconBar, it restores all iconised windows and displays an app menu*/
				if (block.pointer.buttons == wimp_CLICK_SELECT) {
					for (i = 0; i < NumWindows; i++) {
						if (WindowStates[i] != wss_CLOSED) {
							WindowStates[i] = wss_ON_SCREEN;
							ResetWindow(*(WinHandles[i]), -1, -1, -1, -1, -1, -1, (wimp_w) - 1);
							ActivateCons(ConsWin);
						}
					}
				} else if (block.pointer.buttons == wimp_CLICK_MENU)
					OpenIconbarMenu(block.pointer);
			}
			break; /* fin reason=6 */

		case wimp_KEY_PRESSED: /* reason=8 */
			if (block.key.w == ConsWin) {
				if (block.key.c == wimp_KEY_RETURN)
					ConsEnterKey(ConsWin);
				else if (block.key.c == wimp_KEY_UP)
					ConsUpKey(ConsWin);
				else if (block.key.c == wimp_KEY_DOWN)
					ConsDownKey(ConsWin);
				else if (block.key.c == wimp_KEY_ESCAPE)
					ConsEscapeKey(ConsWin);
				else
					wimp_process_key(block.key.c);
			}
			break;

		case wimp_MENU_SELECTION: /* reason=9 */
			handleMenuSelection(&(block.selection));
			break;

		case wimp_SCROLL_REQUEST: /* reason=10 */
			block.scroll.xscroll = block.scroll.xscroll + block.scroll.xmin * CharSizeX;
			block.scroll.yscroll = block.scroll.yscroll + block.scroll.ymin * LinSizeY;
			wimp_open_window((wimp_open *) &block);
			break;

		default:
			break;
	}
}

static void main_terminate(void) {
	wimp_close_down(0);
}

/* Check if the address is in the accepted range */
bool validMemAddressRange(int addr) {
	if ((addr < DebugAreaEnd) && (addr > DebugAreaStart))
		return TRUE;
	else
		return FALSE;
}

/* Check if address is aligned to word */
bool alignedAddr(int addr) {
	if (addr % 4 == 0)
		return TRUE;
	else
		return FALSE;
}

/* Selection at the app menu, currently under development */
void handleMenuSelection(wimp_selection *selection) {
	char *entry, aux[MenuEntryLen], line[ConsLinSize - 1];
	int i;
	wimp_decode_menu(IconBarMenu, selection, aux);
	/* Remove trailing characters from returned string */
	entry = strtok(aux, "\r.");
	if (strcmp(entry, "Reset view") == 0) {
		ResetWindow(CodeWin, CodeWinSizeX, CodeWinSizeY, PosXCodeWin, PosYCodeWin,
				0, 0, (wimp_w) - 1);
		ResetWindow(DataWin, DataWinSizeX, DataWinSizeY, PosXDataWin, PosYDataWin,
				0, 0, (wimp_w) - 1);
		ResetWindow(RegsWin, RegsWinSizeX, RegsWinSizeY, PosXRegsWin, PosYRegsWin,
				0, 0, (wimp_w) - 1);
		ResetWindow(ConsWin, ConsWinSizeX, ConsWinSizeY, PosXConsWin, PosYConsWin,
				0, ConsLinTot * LinSizeY - ConsWinSizeY, (wimp_w) - 1);
		if (WindowStates[FPRegsWinOffset] != wss_CLOSED)
			ResetWindow(FPRegsWin, FPRegsWinSizeX, FPRegsWinSizeY, PosXFPRegsWin,
					PosYFPRegsWin, 0, 0, (wimp_w) - 1);
		if (WindowStates[UsrWinOffset] != wss_CLOSED)
			ResetWindow(UsrWin, UsrConsWinSizeX, UsrConsWinSizeY, PosXUsrWin, PosYUsrWin,
					0, (NumLinUsrCon - 10) * LinSizeY, (wimp_w) - 1);
		for (i = 0; i < NumWindows; i++) { /* Restore the status of any non-closed windows */
			if (WindowStates[i] != wss_CLOSED) WindowStates[i] = wss_ON_SCREEN;
		}
	} else if (strcmp(entry, "FP Regs") == 0) {
		/* Submenu option */
		entry = strtok(NULL, "\r.");
		if (entry != NULL) {
			/* Toggle between displays if the window is open */
			if (strcmp(entry, "Single") == 0 && FPdispDoublePrec) {
				FPdispDoublePrec = FALSE;
				if(WindowStates[FPRegsWinOffset] != wss_CLOSED)
					ToggleWinDisplay(FPRegsWin);
			} else if (strcmp(entry, "Double") == 0 && !FPdispDoublePrec) {
				FPdispDoublePrec = TRUE;
				if(WindowStates[FPRegsWinOffset] != wss_CLOSED)
					ToggleWinDisplay(FPRegsWin);
			}
		}
		if (WindowStates[FPRegsWinOffset] == wss_CLOSED)
			FPRegsWin = FPRegsWinCreate(PosXFPRegsWin, PosYFPRegsWin);
		else
			FPRegsWinRedraw(FPRegsWin);
	} else if (strcmp(entry, "Quit") == 0) {
		mainQuitFlag = TRUE;
	}
}
