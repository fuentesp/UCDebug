/*
 * !UCDebug, ARM debugger for RISC OS.
 * https://github.com/fuentesp/UCDebug
 * Copyright (C) 2018  University of Cantabria
 *
 * !UCDebug was developed by the Computer Architecture and Technology
 * Group at the University of Cantabria. A comprehensive list of authors
 * can be found in the file AUTHORS.txt.
 *
 * You can reach the main developers at {fernando.vallejo, cristobal.camarero,
 * pablo.fuentes}@unican.es.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "oslib/wimp.h"
#include "oslib/wimpspriteop.h"
#include <string.h>
/* Added C libraries to avoid warnings */
#include <stdio.h>
#include <stdlib.h>

#include "ibar.h"
#include "main.h"
#include "RegsWin.h"

/*Private Vars*/
struct RegType RegsIcons[20];

/* RegsWinCreate opens a Registers view window, showing the value of the CPU registers */
wimp_w RegsWinCreate(int PosX, int PosY) {
	wimp_w RegsWin;
	int i, j;

	snprintf(RegsWinTitle, WinTitleSize, RegsWinName);
	RegsWin = open_window(RegsWinTitle, RegsWinSizeX, RegsWinSizeY, PosX, PosY,
			RegsWinSizeX, RegsWinSizeY, 0, 0, 0x06);

	snprintf(RegsIcons[0].T_Name, RegNameSize + 1, "R0");
	snprintf(RegsIcons[1].T_Name, RegNameSize + 1, "R1");
	snprintf(RegsIcons[2].T_Name, RegNameSize + 1, "R2");
	snprintf(RegsIcons[3].T_Name, RegNameSize + 1, "R3");
	snprintf(RegsIcons[4].T_Name, RegNameSize + 1, "R4");
	snprintf(RegsIcons[5].T_Name, RegNameSize + 1, "R5");
	snprintf(RegsIcons[6].T_Name, RegNameSize + 1, "R6");
	snprintf(RegsIcons[7].T_Name, RegNameSize + 1, "R7");
	snprintf(RegsIcons[8].T_Name, RegNameSize + 1, "R8");
	snprintf(RegsIcons[9].T_Name, RegNameSize + 1, "R9");
	snprintf(RegsIcons[10].T_Name, RegNameSize + 1, "R10");
	snprintf(RegsIcons[11].T_Name, RegNameSize + 1, "R11");
	snprintf(RegsIcons[12].T_Name, RegNameSize + 1, "R12");
	snprintf(RegsIcons[13].T_Name, RegNameSize + 1, "R13 (SP)");
	snprintf(RegsIcons[14].T_Name, RegNameSize + 1, "R14 (LR)");
	snprintf(RegsIcons[15].T_Name, RegNameSize + 1, "R15 (PC)");
	snprintf(RegsIcons[16].T_Name, RegNameSize + 1, "CPSR");
	snprintf(RegsIcons[17].T_Name, RegNameSize + 1, "FLAGS");
	snprintf(RegsIcons[18].T_Name, RegNameSize + 1, "CPU Mode");
	snprintf(RegsIcons[19].T_Name, RegNameSize + 1, "SPSR");

	for (i = 0; i < 16; i++) {
		/* Create the icons of registers 0 - 15 */
		RegsIcons[i].I_Name = TextIconCreate(RegsWin, 10, 5 + LinSizeY * i, CharSizeX * 8,
				CharSizeY, RegsIcons[i].T_Name, RegNameSize + 1, RegsIcons[i].V_Name);
		ChTextBGColour(RegsWin, RegsIcons[i].I_Name, wimp_COLOUR_LIGHT_GREY);
		RegsIcons[i].I_Val = TextIconCreate(RegsWin, 20 + CharSizeX * 10,
				5 + LinSizeY * i, CharSizeX * 10, CharSizeY, RegsIcons[i].T_Val, PrintedWordSize + 1, RegsIcons[i].V_Val);
		ChTextBGColour(RegsWin, RegsIcons[i].I_Val, wimp_COLOUR_LIGHT_GREY);
	}

	for (j = 0; j < 3; j++) {
		i = j + 16;
		RegsIcons[i].I_Name = TextIconCreate(RegsWin, 10, 20 + LinSizeY * i,
				CharSizeX * 8, CharSizeY, RegsIcons[i].T_Name, RegNameSize + 1, RegsIcons[i].V_Name);
		ChTextBGColour(RegsWin, RegsIcons[i].I_Name, wimp_COLOUR_LIGHT_GREY);
		RegsIcons[i].I_Val = TextIconCreate(RegsWin, 20 + CharSizeX * 10,
				20 + LinSizeY * i, CharSizeX * 10, CharSizeY, RegsIcons[i].T_Val, PrintedWordSize + 1, RegsIcons[i].V_Val);
		ChTextBGColour(RegsWin, RegsIcons[i].I_Val, wimp_COLOUR_LIGHT_GREY);
	}

	i = 19;
	RegsIcons[i].I_Name = TextIconCreate(RegsWin, 10, 35 + LinSizeY * i, CharSizeX * 8,
		CharSizeY, RegsIcons[i].T_Name, RegNameSize + 1, RegsIcons[i].V_Name);
	ChTextBGColour(RegsWin, RegsIcons[i].I_Name, wimp_COLOUR_DARK_GREY);
	RegsIcons[i].I_Val = TextIconCreate(RegsWin, 20 + CharSizeX * 10, 35 + LinSizeY * i,
		CharSizeX * 10, CharSizeY, RegsIcons[i].T_Val, PrintedWordSize + 1, RegsIcons[i].V_Val);
	ChTextBGColour(RegsWin, RegsIcons[i].I_Val, wimp_COLOUR_DARK_GREY);

	RegsWinRedraw(RegsWin);

	return RegsWin;
}

/* RegsWinRedraw updates the Register view window */
void RegsWinRedraw(wimp_w RegsWin) {
	int i;

	/* Register value within current context */
	for (i = 0; i < 16; i++) {
		snprintf(RegsIcons[i].T_Val, PrintedWordSize + 1, "0x%08X", CurContext.Regs[i]);
		if (CurContext.Regs[i] != LastShownContext[i])
			ChTextFGColour(RegsWin, RegsIcons[i].I_Val, wimp_COLOUR_RED);
		else
			ChTextFGColour(RegsWin, RegsIcons[i].I_Val, wimp_COLOUR_BLACK);
	}
	/* Display the CPSR, the flags and the CPU mode (the latter two from the CPSR) */
	snprintf(RegsIcons[16].T_Val, PrintedWordSize + 1, "0x%08X", CurContext.CPSR);
	if (CurContext.CPSR != LastShownContext[16])
		ChTextFGColour(RegsWin, RegsIcons[16].I_Val, wimp_COLOUR_RED);
	else
		ChTextFGColour(RegsWin, RegsIcons[16].I_Val, wimp_COLOUR_BLACK);

	snprintf(RegsIcons[17].T_Val, PrintedWordSize + 1, "-----");
	if ((CurContext.CPSR & 0x80000000) != 0) RegsIcons[17].T_Val[0] = 'N';
	if ((CurContext.CPSR & 0x40000000) != 0) RegsIcons[17].T_Val[1] = 'Z';
	if ((CurContext.CPSR & 0x20000000) != 0) RegsIcons[17].T_Val[2] = 'C';
	if ((CurContext.CPSR & 0x10000000) != 0) RegsIcons[17].T_Val[3] = 'V';
	if ((CurContext.CPSR & 0x08000000) != 0) RegsIcons[17].T_Val[3] = 'Q';
	if ((CurContext.CPSR & 0xF8000000) != (LastShownContext[16] & 0xF8000000))
		ChTextFGColour(RegsWin, RegsIcons[17].I_Val, wimp_COLOUR_RED);
	else
		ChTextFGColour(RegsWin, RegsIcons[17].I_Val, wimp_COLOUR_BLACK);

	switch (CurContext.CPSR & 0x01F) {
		case 0x010:
			snprintf(RegsIcons[18].T_Val, PrintedWordSize + 1, "usr");
			/* Clear and hide SPSR register */
			snprintf(RegsIcons[19].T_Val, PrintedWordSize + 1, "");
			ChTextBGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_DARK_GREY);
			ChTextBGColour(RegsWin, RegsIcons[19].I_Name, wimp_COLOUR_DARK_GREY);
			break;
		case 0x011:
			snprintf(RegsIcons[18].T_Val, PrintedWordSize + 1, "fiq");
			for (i = 0; i < 7; i++) { /* Update value from sp and lr regs */
				snprintf(RegsIcons[i+8].T_Val, PrintedWordSize + 1, "0x%08X", CurContext.FiqRegs[i]);
				if (CurContext.FiqRegs[i] != LastShownContext[i+8])
					ChTextFGColour(RegsWin, RegsIcons[i+8].I_Val, wimp_COLOUR_RED);
				else
					ChTextFGColour(RegsWin, RegsIcons[i+8].I_Val, wimp_COLOUR_BLACK);
			}
			snprintf(RegsIcons[19].T_Val, PrintedWordSize + 1, "0x%08X", CurContext.FiqRegs[7]);
			ChTextBGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_LIGHT_GREY);
			ChTextBGColour(RegsWin, RegsIcons[19].I_Name, wimp_COLOUR_LIGHT_GREY);
			if (CurContext.FiqRegs[7] != LastShownContext[17])
				ChTextFGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_RED);
			else
				ChTextFGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_BLACK);
			break;
		case 0x012:
			snprintf(RegsIcons[18].T_Val, PrintedWordSize + 1, "irq");
			for (i = 0; i < 2; i++) { /* Update value from sp and lr regs */
				snprintf(RegsIcons[i+13].T_Val, PrintedWordSize + 1, "0x%08X", CurContext.IrqRegs[i]);
				if (CurContext.IrqRegs[i] != LastShownContext[i+13])
					ChTextFGColour(RegsWin, RegsIcons[i+13].I_Val, wimp_COLOUR_RED);
				else
					ChTextFGColour(RegsWin, RegsIcons[i+13].I_Val, wimp_COLOUR_BLACK);
			}
			snprintf(RegsIcons[19].T_Val, PrintedWordSize + 1, "0x%08X", CurContext.IrqRegs[2]);
			ChTextBGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_LIGHT_GREY);
			ChTextBGColour(RegsWin, RegsIcons[19].I_Name, wimp_COLOUR_LIGHT_GREY);
			if (CurContext.IrqRegs[2] != LastShownContext[17])
				ChTextFGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_RED);
			else
				ChTextFGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_BLACK);
			break;
		case 0x013:
			snprintf(RegsIcons[18].T_Val, PrintedWordSize + 1, "svc");
			for (i = 0; i < 2; i++) { /* Update value from sp and lr regs */
				snprintf(RegsIcons[i+13].T_Val, PrintedWordSize + 1, "0x%08X", CurContext.SvcRegs[i]);
				if (CurContext.SvcRegs[i] != LastShownContext[i+13])
					ChTextFGColour(RegsWin, RegsIcons[i+13].I_Val, wimp_COLOUR_RED);
				else
					ChTextFGColour(RegsWin, RegsIcons[i+13].I_Val, wimp_COLOUR_BLACK);
			}
			snprintf(RegsIcons[19].T_Val, PrintedWordSize + 1, "0x%08X", CurContext.SvcRegs[2]);
			ChTextBGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_LIGHT_GREY);
			ChTextBGColour(RegsWin, RegsIcons[19].I_Name, wimp_COLOUR_LIGHT_GREY);
			if (CurContext.SvcRegs[2] != LastShownContext[17])
				ChTextFGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_RED);
			else
				ChTextFGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_BLACK);
			break;
		case 0x017:
			snprintf(RegsIcons[18].T_Val, PrintedWordSize + 1, "abt");
			for (i = 0; i < 2; i++) { /* Update value from sp and lr regs */
				snprintf(RegsIcons[i+13].T_Val, PrintedWordSize + 1, "0x%08X", CurContext.AbtRegs[i]);
				if (CurContext.AbtRegs[i] != LastShownContext[i+13])
					ChTextFGColour(RegsWin, RegsIcons[i+13].I_Val, wimp_COLOUR_RED);
				else
					ChTextFGColour(RegsWin, RegsIcons[i+13].I_Val, wimp_COLOUR_BLACK);
			}
			snprintf(RegsIcons[19].T_Val, PrintedWordSize + 1, "0x%08X", CurContext.AbtRegs[2]);
			ChTextBGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_LIGHT_GREY);
			ChTextBGColour(RegsWin, RegsIcons[19].I_Name, wimp_COLOUR_LIGHT_GREY);
			if (CurContext.AbtRegs[2] != LastShownContext[17])
				ChTextFGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_RED);
			else
				ChTextFGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_BLACK);
			break;
		case 0x01B:
			snprintf(RegsIcons[18].T_Val, PrintedWordSize + 1, "und");
			for (i = 0; i < 2; i++) { /* Update value from sp and lr regs */
				snprintf(RegsIcons[i+13].T_Val, PrintedWordSize + 1, "0x%08X", CurContext.UndRegs[i]);
				if (CurContext.UndRegs[i] != LastShownContext[i+13])
					ChTextFGColour(RegsWin, RegsIcons[i+13].I_Val, wimp_COLOUR_RED);
				else
					ChTextFGColour(RegsWin, RegsIcons[i+13].I_Val, wimp_COLOUR_BLACK);
			}
			snprintf(RegsIcons[19].T_Val, PrintedWordSize + 1, "0x%08X", CurContext.UndRegs[2]);
			ChTextBGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_LIGHT_GREY);
			ChTextBGColour(RegsWin, RegsIcons[19].I_Name, wimp_COLOUR_LIGHT_GREY);
			if (CurContext.UndRegs[2] != LastShownContext[17])
				ChTextFGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_RED);
			else
				ChTextFGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_BLACK);
			break;
		case 0x01F:
			snprintf(RegsIcons[18].T_Val, PrintedWordSize + 1, "sys");
			/* Clear and hide SPSR register */
			snprintf(RegsIcons[19].T_Val, PrintedWordSize + 1, "");
			ChTextBGColour(RegsWin, RegsIcons[19].I_Val, wimp_COLOUR_DARK_GREY);
			ChTextBGColour(RegsWin, RegsIcons[19].I_Name, wimp_COLOUR_DARK_GREY);
			break;
		default:
			snprintf(RegsIcons[18].T_Val, PrintedWordSize + 1, "UKN");
			break;
	}
	if ((CurContext.CPSR & 0x01F) != (LastShownContext[16] & 0x01F))
		ChTextFGColour(RegsWin, RegsIcons[18].I_Val, wimp_COLOUR_RED);
	else
		ChTextFGColour(RegsWin, RegsIcons[18].I_Val, wimp_COLOUR_BLACK);

	/* Update window */
	UpdateWindow(RegsWin);
}

/* Update the values of the last context shown */
void UpdateLastShownCtx() {
	int i;
	for (i = 0; i < 16; i++)
		LastShownContext[i] = CurContext.Regs[i];
	LastShownContext[16] = CurContext.CPSR;
	switch (CurContext.CPSR & 0x01F) {
		case 0x011:
			for (i = 0; i < 7; i++)
				LastShownContext[i+8] = CurContext.FiqRegs[i];
			LastShownContext[17] = CurContext.FiqRegs[7];
			break;
		case 0x012:
			LastShownContext[13] = CurContext.IrqRegs[0];
			LastShownContext[14] = CurContext.IrqRegs[1];
			LastShownContext[17] = CurContext.IrqRegs[2];
			break;
		case 0x013:
			LastShownContext[13] = CurContext.SvcRegs[0];
			LastShownContext[14] = CurContext.SvcRegs[1];
			LastShownContext[17] = CurContext.SvcRegs[2];
			break;
		case 0x017:
			LastShownContext[13] = CurContext.AbtRegs[0];
			LastShownContext[14] = CurContext.AbtRegs[1];
			LastShownContext[17] = CurContext.AbtRegs[2];
			break;
		case 0x01B:
			LastShownContext[13] = CurContext.UndRegs[0];
			LastShownContext[14] = CurContext.UndRegs[1];
			LastShownContext[17] = CurContext.UndRegs[2];
			break;
		default:
			LastShownContext[17] = 0x12345678; 	/* Weird value, to detect a change in user mode */
			break;
	}
}
