{"name":"!UCDebug","tagline":"!UCDebug is an ARM debugger for RISC OS, developed by the Computer Architecture and Technology Group at the University of Cantabria, Spain.","body":"#!UCDebug overview\r\n\r\n!UCDebug is an ARM debugger for RISC OS with a window-based interface, developed by the [Computer Architecture and Technology Group](https://www.atc.unican.es/) at the the [University of Cantabria](https://web.unican.es/), Spain.\r\n\r\n!UCDebug allows to run codes in a controlled manner, displaying the behavior and changes in the register set and memory. A simple list of commands (and their syntax) can be found by typying \"help\" at the Console window of the debugger. !UCDebug runs in a Raspberry Pi 1B+ under version 5.24 of RISC OS (released on 16-April-2018). A working copy of the application is provided for ease of use, as well as the full code. !UCDebug requires GCC4, OSLib and C shared libraries in order to compile. More information can be found in the README file in the code.\r\n\r\n!UCDebug is distributed under the GPLv3 license.\r\n\r\n##Debugger description\r\n\r\nWe intend to upload full documentation and a comprehensive use guide very soon.\r\n\r\n##Developers and maintainers\r\n\r\n!UCDebug has been co-developed by [Cristóbal Camarero](http://personales.unican.es/camareroc/), Fernando Vallejo and [Pablo Fuentes](http://personales.unican.es/fuentesp/), as part of a project led by Carmen Martínez. Other current and former members of the group who have also collaborated include Jesús Gutiérrez, Elena Suárez and Adrián Barredo.\r\n\r\n#Changeset\r\n\r\n* Added IRQ handling routine to address the use of interrupts within user code (currently in development). (v1.5.1)\r\n* Debugger does not throw segmentation fault if a SWI 0x2 in the user code receives an invalid address in R0. (v1.5.1)\r\n* Added Makefile to compile faster. 'compile' file now switches to debugger folder and runs a 'make' command. (v1.5.1)\r\n* Set a dedicated stack for each mode, all located in the Debug area. (v1.5)\r\n* Allowed to change register values when an Unknown mode is accessed. (v1.5)\r\n* OS does not crash when trying to load non-existent files. (v1.5)\r\n\r\n#Known Bugs (v1.5.1)\r\n* Execution of code in Abort mode is not stable (LR in this mode becomes polluted).\r\n* Execution of certain instructions is not properly controlled (e.g., when PC is updated by an LDM instruction).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
