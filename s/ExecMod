@ !UCDebug, ARM debugger for RISC OS.
@ https://github.com/fuentesp/UCDebug
@ Copyright (C) 2018  University of Cantabria
@
@ !UCDebug was developed by the Computer Architecture and Technology
@ Group at the University of Cantabria. A comprehensive list of authors
@ can be found in the file AUTHORS.txt.
@
@ You can reach the main developers at {fernando.vallejo, cristobal.camarero,
@ pablo.fuentes}@unican.es.
@
@ This program is free software: you can redistribute it and/or modify
@ it under the terms of the GNU General Public License as published by
@ the Free Software Foundation, either version 3 of the License, or
@ (at your option) any later version.
@
@ This program is distributed in the hope that it will be useful,
@ but WITHOUT ANY WARRANTY; without even the implied warranty of
@ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@ GNU General Public License for more details.
@
@ You should have received a copy of the GNU General Public License
@ along with this program.  If not, see <https://www.gnu.org/licenses/>.

.global   EnableFPU
.global   CodeExecute
.global   DefCurCtx
.global   DefStackCtx
.extern   CurContext
.extern   DebugAreaEnd
.extern   BrkPtList
.extern   CurNumBr
.extern   GTBrkP
.extern   ExecType

.equ SWI_Mask,    0x0F000000
.equ Cond_Mask,   0xF0000000
.equ Code_OSExit, 0x0F000011
.equ Code_OSWriteStr, 0x0F000002
.equ Code_OSWriteChar, 0x0F000000
.equ Code_OSEnterOS, 0x0F000016
.equ Code_OSLeaveOS, 0x0F00007C
.equ Num_Loop,    1000


.data

.align 2
ourregisters:  .space 280  @ include CPSR, FPU Regs and usr-specific regs
jumpregisters: .space 64
Loop:          .space  4
HandPreRel:    .space  4
HandDatRel:    .space  4
HandUndRel:    .space  4
HandIRQRel:    .space  4
ReturnHandler: .space  4
StackHandler:  .space  4

immediatebreakpointnumber: .word 0
immediatebreakpoints: .space 0x80 @16 pairs (address, instruction)

.text

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Function to activate the FPU (must be executed in privileged mode)
EnableFPU:
mrc p15, 0, r0, c1, c0, 2 @enable FPU
orr r0,r0,#0x300000 @ enable single precision
orr r0,r0,#0xC00000 @ also enable double precision
mcr p15, 0, r0, c1, c0, 2 @at this point, the FPU is enabled to work with single and double precision
mov r0,#0x40000000
VMSR FPEXC,r0
mov pc, lr


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ Function called from the C-written interface to execute the code to debug.
@
CodeExecute:

@
@ It stores the debugger context including CPSR
@
sub sp,sp,#4
str r0,[sp]
ldr r0,=ourregisters
stm r0, {r0-r12}  @ storing PC is useless; sp and lr is done per-mode
ldr r1,[sp]
str r1,[r0] @ write program r0 in its place
add sp,sp,#4
mrs r1,CPSR @ write debugger CPSR
str r1,[r0,#64]
swi 0x16 @ OS_EnterOS (enter SVC mode)
str sp, [r0, #200] @ write debugger SVC sp
str lr, [r0, #204] @ write debugger SVC lr
mrs r2, SPSR
str r2, [r0, #208] @ write debugger SVC spsr
mrs r1, cpsr
bic r1, r1, #0x1
msr cpsr, r1 @ switch from SVC to IRQ mode
str sp, [r0, #236] @ write IRQ sp
str lr, [r0, #240] @ write IRQ lr
mrs r2, spsr
str r2, [r0, #244] @ write IRQ SPSR in its place
orr r1, r1, #0x5
msr cpsr, r1 @ switch from IRQ to Abt mode
str sp, [r0, #212] @ write abort sp
str lr, [r0, #216] @ write abort lr
mrs r2, spsr
str r2, [r0, #220] @ write abort SPSR
bic r1, r1, #0x6
msr cpsr, r1 @ switch from Abt to FIQ mode
add r2, r0, #248
stm r2, {r8-r14} @ write FIQ specific regs
mrs r2, spsr
str r2, [r0, #276] @ write FIQ SPSR in its place
orr r1, r1, #0xA
msr cpsr, r1 @ switch from FIQ to Und mode
str sp, [r0, #224] @ write undefined sp
str lr, [r0, #228] @ write undefined lr
mrs r2, spsr
str r2, [r0, #232] @ write undefined SPSR in its place
orr r1, r1, #0x1F
msr cpsr, r1 @ switch to Sys mode
str sp, [r0, #52] @ write user sp
str lr, [r0, #56] @ write user lr

@
@ Number of loops = 0
@
ldr r0,=Loop
mov r1,#0
str r1,[r0]
@
@ It looks if the next instruction has to be executed
@
Another_inst:
bl CheckInst
ands r0,r0,#0xFF00 @ Check State byte of ExecType
bne End_CodeExec

@
@ Set Brkpt in the following instruction
@
bl setimmediatebreakpoints

@
@ jumptoprogram enables the handler routine for the breakpoint, switches to the context
@ from the debugged program, executes the instruction, stores part of the context from
@ the debugged program (except sp, lr and CPSR) and disables the brkpt handler routine
@
bl jumptoprogram

@
@ Remove Breakpoint from the following instruction
@
bl clearimmediatebreakpoints

@
@ Check if the execution goes on; if at the comeback the state byte at r0 is 0, it
@ returns to the CLI
@
bl ReturnCLI
cmp r0,#0
bne Another_inst

@
@ Recover the context from the debugger, including the CPSR
@
End_CodeExec:
ldr r0,=ourregisters
mrs r1, CPSR
ldr sp, [r0, #200] @ load debugger SVC sp
ldr lr, [r0, #204] @ load debugger SVC lr
ldr r2, [r0, #208]
msr spsr, r2       @ load debugger SVC spsr
bic r1, r1, #0x1
msr cpsr, r1 @ switch from SVC to IRQ mode
ldr sp, [r0, #236] @ load IRQ sp
ldr lr, [r0, #240] @ load IRQ lr
ldr r2, [r0, #244]
msr spsr, r2       @ load IRQ SPSR
orr r1, r1, #0x5
msr cpsr, r1 @ switch from IRQ to Abt mode
ldr sp, [r0, #212] @ load abort sp
ldr lr, [r0, #216] @ load abort lr
ldr r2, [r0, #220]
msr spsr, r2       @ load abort SPSR
bic r1, r1, #0x6
msr cpsr, r1 @ switch from Abt to FIQ mode
add r2, r0, #248
ldm r2, {r8-r14}   @ load FIQ specific regs
ldr r2, [r0, #276]
msr spsr, r2       @ load FIQ SPSR
orr r1, r1, #0xA
msr cpsr, r1 @ switch from FIQ to Und mode
ldr sp, [r0, #224] @ load undefined sp
ldr lr, [r0, #228] @ load undefined lr
ldr r2, [r0, #232]
msr spsr, r2       @ load undefined SPSR
orr r1, r1, #0x1F
msr cpsr, r1 @ switch to Sys mode
add r1, r0, #4
ldm r1, {r1-r14}  @ recover general purpose regs (previous usr mode is unknown)
ldr r1,[r0,#64]  @ CPSR
msr CPSR, r1
ldm r0, {r0-r12}  @ PC is not recovered

mov pc,lr

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ jumptoprogram enables the handler routine for the breakpoint, switches to the context
@ from the debugged program, executes the instruction, stores part of the context from
@ the debugged program (except sp, lr and CPSR) and disables the brkpt handler routine
@
jumptoprogram:

ldr r0,=ReturnHandler
str lr,[r0]
ldr r0,=StackHandler
str sp,[r0]

bl EnableFPU

ldr r0,=CurContext
ldr r0,[r0,#60]
ldr r0,[r0] @ prefetch the instruction

ldr r0,=CurContext
ldr r1,[r0,#52]
ldrb r1,[r1,#-4] @ prefetch the user mode stack
ldr r1,[r0,#200]
ldrb r1,[r1,#-4] @ prefetch the SVC stack
ldr r1,[r0,#212]
ldrb r1,[r1,#-4] @ prefetch the Abt stack
ldr r1,[r0,#224]
ldrb r1,[r1,#-4] @ prefetch the Und stack
ldr r1,[r0,#236]
ldrb r1,[r1,#-4] @ prefetch the IRQ stack
ldr r1,[r0,#268]
ldrb r1,[r1,#-4] @ prefetch the FIQ stack

mov r0,#0x01 @ claim + UNdefined instruction
orr r0,r0,#0x100
ldr r1,=UndefinedInstructhandler
mov r2,#0
swi 0x69 @ OS_ClaimProcessorVector
@remember to release r1
ldr r0,=HandUndRel
str r1,[r0]

mrs r1, cpsr
orr r1, r1, #0x180	@ Disable imprecise aborts and interrupts
msr cpsr, r1		@ to avoid inconsistent states


mov r0,#0x03 @ claim + prefetch abort
orr r0,r0,#0x100
ldr r1,=PrefetchAborthandler
mov r2,#0
swi 0x69 @ OS_ClaimProcessorVector
@remember to release r1
ldr r0,=HandPreRel
str r1,[r0]

mov r0,#0x04 @ claim + Data abort
orr r0,r0,#0x100
ldr r1,=DataAborthandler
mov r2,#0
swi 0x69 @ OS_ClaimProcessorVector
@remember to release r1
ldr r0,=HandDatRel
str r1,[r0]

mov r0, #0x06 	@ claim + IRQ
orr r0, r0, #0x100
ldr r1, =IRQhandler
mov r2, #0
swi 0x69 @ OS_ClaimProcessorVector
ldr r0, =HandIRQRel	@ remember to release r1
str r1, [r0]

@
@ Load context from all modes
@ TODO: define sp for all modes, to prevent errors
@
ldr r0,=CurContext
add r1, r0, #68
vldm r1, {s0-s31} @ load floating-point regs
ldr r1, [r1, #128]
vmsr FPSCR, r1 @ load FPSCR
mrs r1, cpsr
bic r1, r1, #0xC
msr cpsr, r1 @ switch from Sys to SVC mode
ldr sp, [r0, #200] @ load svc sp
ldr lr, [r0, #204] @ load svc lr
ldr r2, [r0, #208]
msr spsr, r2 @ load svc SPSR
mrs r1, cpsr
orr r1, r1, #0x4
msr cpsr, r1 @ switch from SVC to Abt mode
ldr sp, [r0, #212] @ load abt sp
ldr lr, [r0, #216] @ load abt lr
ldr r2, [r0, #220]
msr spsr, r2 @ load abt SPSR
bic r1, r1, #0x1
msr cpsr, r1 @ switch from Abt to IRQ mode
ldr sp, [r0, #236] @ load IRQ sp
ldr lr, [r0, #240] @ load IRQ lr
ldr r2, [r0, #244]
msr spsr, r2 @ load IRQ SPSR
orr r1, r1, #0x9
msr cpsr, r1 @ switch from IRQ to Und mode
ldr sp, [r0, #224] @ load Und sp
ldr lr, [r0, #228] @ load Und lr
ldr r2, [r0, #232]
msr spsr, r2 @ load Und SPSR
bic r1, r1, #0xA
msr cpsr, r1 @ switch from Und to FIQ mode
add r2, r0, #248
ldm r2, {r8-r14} @ load FIQ specific regs
ldr r2, [r0, #276]
msr spsr, r2 @ load FIQ SPSR
orr r1, r1, #0x1F
msr cpsr, r1 @ switch to system mode to access remaining user regs
add r1, r0, #4
ldm r1, {r1-r14} @ load regs from usr mode (to update sp and lr, in case
                 @ the user program was left in a different user mode)
ldr r1,[r0,#64]
msr CPSR, r1 @ load usr CPSR
ldr r1,=jumpregisters
stm r1,{r0-r14} @missing r0,r1,pc
ldr r2,[r0]
str r2,[r1]	@missing r1, pc
ldr r2,[r0,#4]
str r2,[r1,#4]  @missing pc
ldr r2, [r0, #60]
str r2,[r1,#60]
ldm r1,{r0-r15}     @ jump to user program

PrefetchAborthandler:
@@ Save context from all modes, starting from Abort mode
sub sp,sp,#4
str r0,[sp]
ldr r0,=CurContext
stm r0,{r0-r12}
ldr r1,[sp]
str r1,[r0] @ write program r0 in its place
add sp,sp,#4
sub r1,lr,#4
str r1,[r0,#60] @ write program pc in its place (it is lr while in exception)
add r2, r0, #68
vstm r2!, {s0-s31} @ write floating-point regs
vmrs r3, FPSCR
str r3, [r2] @ write FPSCR
str sp, [r0, #212] @ write abort sp
@str lr, [r0, #216] @ write abort lr
mrs r3, spsr
str r3, [r0, #220] @ write abort SPSR
str r3, [r0, #64] @ write program CPSR (copied to SPSR when accessing excep)
orr r3, r3, #0x180	@ Disable interrupts and imprecise aborts
orr r3, r3, #0x1F
msr cpsr, r3 @ switch to system mode to access remaining user regs
str sp, [r0, #52] @ write program sp in its place
str lr, [r0, #56] @ write program lr in its place
bic r3, r3, #0x4
msr cpsr, r3 @ switch from System to Undefined mode
str sp, [r0, #224] @ write undefined sp
str lr, [r0, #228] @ write undefined lr
mrs r2, spsr
str r2, [r0, #232] @ write undefined SPSR in its place
bic r3, r3, #0x9
msr cpsr, r3 @ switch from Und to IRQ mode
mrs r2, spsr
str r2, [r0, #244] @ write IRQ SPSR in its place
str sp, [r0, #236] @ write IRQ sp
str lr, [r0, #240] @ write IRQ lr
orr r3, r3, #0x1
msr cpsr, r3 @ switch from IRQ to Supervisor mode
mrs r2, spsr
str r2, [r0, #208] @ write supervisor SPSR in its place
str sp, [r0, #200] @ write supervisor sp
str lr, [r0, #204] @ write supervisor lr
bic r3, r3, #0x2
msr cpsr, r3 @ switch to FIQ mode
mrs r2, spsr
str r2, [r0, #276] @ write FIQ SPSR in its place
add r2, r0, #248
stm r2, {r8-r14} @ write FIQ specific regs
orr r3, r3, #0x1F
msr cpsr, r3 @ switch to sys mode

ldr r0,[r1]    @ read the instruction
ldr r2,=0xE1200071 @ code for bkpt 1
cmp r0,r2
beq ReleaseHandler
@ mark Prefetch Abort
ldr r1,=ExecType
mov r0, #0x1300
str r0,[r1]

ldr r0,=CurContext
ldr r1, [r0,#60]
add r1, r1, #4
str r1, [r0, #216] @ write abort lr (only if it is not a breakpoint)

b  ReleaseHandler

UndefinedInstructhandler:
@@ Save context from all modes, starting from Undefined mode
sub sp,sp,#4
str r0,[sp]
ldr r0,=CurContext
stm r0,{r0-r12}
ldr r1,[sp]
str r1,[r0] @ write program r0 in its place
add sp,sp,#4
sub r1,lr,#4
str r1,[r0,#60] @ write program pc in its place (it is lr while in exception)
add r2, r0, #68
vstm r2!, {s0-s31} @ write floating-point regs
vmrs r3, FPSCR
str r3, [r2] @ write FPSCR
str sp, [r0, #224] @ write undefined sp
str lr, [r0, #228] @ write undefined lr
mrs r3, spsr
str r3, [r0, #232] @ write undefined SPSR in its place
str r3, [r0, #64] @ write program CPSR (copied to SPSR when accessing excep)
bic r3, r3, #0x9
msr cpsr, r3 @ switch from Und to IRQ mode
mrs r2, spsr
str r2, [r0, #244] @ write IRQ SPSR in its place
str sp, [r0, #236] @ write IRQ sp
str lr, [r0, #240] @ write IRQ lr
orr r3, r3, #0x1
msr cpsr, r3 @ switch from IRQ to Supervisor mode
mrs r2, spsr
str r2, [r0, #208] @ write supervisor SPSR in its place
str sp, [r0, #200] @ write supervisor sp
str lr, [r0, #204] @ write supervisor lr
bic r3, r3, #0x2
msr cpsr, r3 @ switch to FIQ mode
mrs r2, spsr
str r2, [r0, #276] @ write FIQ SPSR in its place
add r2, r0, #248
stm r2, {r8-r14} @ write FIQ specific regs
orr r3, r3, #0x6
msr cpsr, r3 @ switch from FIQ to abort mode
str sp, [r0, #212] @ write abort sp
str lr, [r0, #216] @ write abort lr
mrs r2, spsr
str r2, [r0, #220] @ write abort SPSR
orr r3, r3, #0x1F
msr cpsr, r3 @ switch to system mode to access remaining user regs
str sp, [r0, #52] @ write program sp in its place
str lr, [r0, #56] @ write program lr in its place
bic r3, r3, #0x1F
msr cpsr, r3 @ switch to sys mode

@ mark Undefined Instruction
ldr r1,=ExecType
mov r0, #0x1200
str r0,[r1]

b  ReleaseHandler

DataAborthandler:
@@ Save context from all modes, starting from Abort mode
sub sp,sp,#4
str r0,[sp]
ldr r0,=CurContext
stm r0,{r0-r12}
ldr r1,[sp]
str r1,[r0] @ write program r0 in its place
add sp,sp,#4
sub r1,lr,#8
str r1,[r0,#60] @ write program pc in its place (it is lr while in exception)
add r2, r0, #68
vstm r2!, {s0-s31} @ write floating-point regs
vmrs r3, FPSCR
str r3, [r2] @ write FPSCR
str sp, [r0, #212] @ write abort sp
str lr, [r0, #216] @ write abort lr
mrs r3, spsr
str r3, [r0, #220] @ write abort SPSR
str r3, [r0, #64] @ write program CPSR (copied to SPSR when accessing excep)
orr r3, r3, #0x1F
msr cpsr, r3 @ switch to system mode to access remaining user regs
str sp, [r0, #52] @ write program sp in its place
str lr, [r0, #56] @ write program lr in its place
bic r3, r3, #0x4
msr cpsr, r3 @ switch from System to Undefined mode
str sp, [r0, #224] @ write undefined sp
str lr, [r0, #228] @ write undefined lr
mrs r2, spsr
str r2, [r0, #232] @ write undefined SPSR in its place
bic r3, r3, #0x9
msr cpsr, r3 @ switch from Und to IRQ mode
mrs r2, spsr
str r2, [r0, #244] @ write IRQ SPSR in its place
str sp, [r0, #236] @ write IRQ sp
str lr, [r0, #240] @ write IRQ lr
orr r3, r3, #0x1
msr cpsr, r3 @ switch from IRQ to Supervisor mode
mrs r2, spsr
str r2, [r0, #208] @ write supervisor SPSR in its place
str sp, [r0, #200] @ write supervisor sp
str lr, [r0, #204] @ write supervisor lr
bic r3, r3, #0x2
msr cpsr, r3 @ switch to FIQ mode
mrs r2, spsr
str r2, [r0, #276] @ write FIQ SPSR in its place
add r2, r0, #248
stm r2, {r8-r14} @ write FIQ specific regs
orr r3, r3, #0x6
msr cpsr, r3 @ switch to sys mode

@ mark Data Abort
ldr r1,=ExecType
mov r0, #0x1100
str r0,[r1]

b ReleaseHandler

IRQhandler:
mrs r0, spsr
orr r0, r0, #0xF	@ the IRQ routine will exit in system mode
bic r0, r0, #0x180	@ and with the IRQs enabled
msr spsr, r0

ldr r0, =ourregisters
mrs r1, CPSR
orr r1, r1, #0x1
msr CPSR, r1		@switch from IRQ to SVC
ldr sp, [r0, #200]	@ load debugger SVC sp
ldr lr, [r0, #204] 	@ load debugger SVC lr
ldr r2, [r0, #208]
msr spsr, r2       	@ load debugger SVC spsr
bic r1, r1, #0x1
msr cpsr, r1 		@ switch from SVC to IRQ mode
ldr sp, [r0, #236] 	@ load IRQ sp
@ldr lr, [r0, #240] 	@ load IRQ lr
@ldr r2, [r0, #244]
@msr spsr, r2       	@ load IRQ SPSR
orr r1, r1, #0x5
msr cpsr, r1 		@ switch from IRQ to Abt mode
ldr sp, [r0, #212] 	@ load abort sp
ldr lr, [r0, #216] 	@ load abort lr
ldr r2, [r0, #220]
msr spsr, r2       	@ load abort SPSR
bic r1, r1, #0x6
msr cpsr, r1 		@ switch from Abt to FIQ mode
add r2, r0, #248
ldm r2, {r8-r14}   	@ load FIQ specific regs
ldr r2, [r0, #276]
msr spsr, r2       	@ load FIQ SPSR
orr r1, r1, #0xA
msr cpsr, r1 		@ switch from FIQ to Und mode
ldr sp, [r0, #224] 	@ load undefined sp
ldr lr, [r0, #228] 	@ load undefined lr
ldr r2, [r0, #232]
msr spsr, r2       	@ load undefined SPSR
orr r1, r1, #0x1F
msr cpsr, r1 		@ switch to Sys mode
ldm r0, {r0-r14}  	@ recover general purpose regs (previous usr mode is unknown)
ldr sp,=StackHandler 	@recover sp from system mode
ldr sp,[sp]
@bic r1,r1,#0xD
@msr cpsr,r1 @ switch to IRQ

ldr r0,=HandIRQRel
ldr r1,[r0]
mov r0,#0x6 @ release + IRQ
ldr r2,=IRQhandler
swi 0x69 @ OS_ClaimProcessorVector

ldr r0,=HandUndRel
ldr r1,[r0]
mov r0,#0x1 @ release + UNdefined instruction
ldr r2,=UndefinedInstructhandler
swi 0x69 @ OS_ClaimProcessorVector

ldr r0,=HandPreRel
ldr r1,[r0]
mov r0,#0x3 @ release + prefetch abort
ldr r2,=PrefetchAborthandler
swi 0x69 @ OS_ClaimProcessorVector

ldr r0,=HandDatRel
ldr r1,[r0]
mov r0,#0x4 @ release + data abort
ldr r2,=DataAborthandler
swi 0x69 @ OS_ClaimProcessorVector

@switch again to IRQ mode
mrs r0,cpsr
bic r0,r0,#0xF
orr r0,r0,#0x2
@orr r0,r0,#0x180 @unnecessary, the swis do not change these.
msr cpsr,r0

ldr lr,=ReturnHandler @stop application execution
ldr lr,[lr]
add lr,lr,#4 @IRQ exceptions add 4 to the next execution to be executed

ldr r0,=HandIRQRel
ldr r0,[r0]
bx r0 @jump to RISCOS IRQ


ReleaseHandler:

ldr r0,=ourregisters
mrs r1, CPSR
bic r1, r1, #0xC
orr r1, r1, #0x180 @ disable IRQ
msr CPSR, r1       @ switch from Sys to SVC
ldr sp, [r0, #200] @ load debugger SVC sp
ldr lr, [r0, #204] @ load debugger SVC lr
ldr r2, [r0, #208]
msr spsr, r2       @ load debugger SVC spsr
bic r1, r1, #0x1
msr cpsr, r1 @ switch from SVC to IRQ mode
ldr sp, [r0, #236] @ load IRQ sp
ldr lr, [r0, #240] @ load IRQ lr
ldr r2, [r0, #244]
msr spsr, r2       @ load IRQ SPSR
orr r1, r1, #0x5
msr cpsr, r1 @ switch from IRQ to Abt mode
ldr sp, [r0, #212] @ load abort sp
ldr lr, [r0, #216] @ load abort lr
ldr r2, [r0, #220]
msr spsr, r2       @ load abort SPSR
bic r1, r1, #0x6
msr cpsr, r1 @ switch from Abt to FIQ mode
add r2, r0, #248
ldm r2, {r8-r14}   @ load FIQ specific regs
ldr r2, [r0, #276]
msr spsr, r2       @ load FIQ SPSR
orr r1, r1, #0xA
msr cpsr, r1 @ switch from FIQ to Und mode
ldr sp, [r0, #224] @ load undefined sp
ldr lr, [r0, #228] @ load undefined lr
ldr r2, [r0, #232]
msr spsr, r2       @ load undefined SPSR
orr r1, r1, #0x1F
msr cpsr, r1 @ switch to Sys mode
ldm r0, {r0-r14}  @ recover general purpose regs (previous usr mode is unknown)


ldr r0,=HandDatRel
ldr r1,[r0]
mov r0,#0x4 @ release + data abort
ldr r2,=DataAborthandler
swi 0x69 @ OS_ClaimProcessorVector

ldr r0,=HandUndRel
ldr r1,[r0]
mov r0,#0x1 @ release + UNdefined instruction
ldr r2,=UndefinedInstructhandler
swi 0x69 @ OS_ClaimProcessorVector

ldr r0,=HandPreRel
ldr r1,[r0]
mov r0,#0x3 @ release + prefetch abort
ldr r2,=PrefetchAborthandler
swi 0x69 @ OS_ClaimProcessorVector

ldr r0,=HandIRQRel
ldr r1,[r0]
mov r0,#0x6 @ release + IRQ
ldr r2,=IRQhandler
swi 0x69 @ OS_ClaimProcessorVector

ldr r0,=ReturnHandler
ldr lr,[r0]
ldr r0,=StackHandler
ldr sp,[r0]

mrs r0,cpsr
bic r0,r0,#0x1C0	@ Re-enable imprecise aborts, fast interrupts,
msr cpsr,r0		@ and normal interrupts

mov pc, lr	@ Return in sys mode

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ Set CurContext to Default values
@
DefCurCtx:
str lr,[sp, #-4]!
str r0,[sp, #-4]!
ldr r0,=CurContext
stm r0,{r0-r15}
ldr r1,[sp], #4
str r1,[r0] @ write program r0 in its place
mrs r1,CPSR
str r1,[r0,#64]   @ CPSR of the user program
add r2, r0, #68
vstm r2, {s0-s31} @ write floating-point regs
vmrs r3, FPSCR
str r3, [r2, #128] @ write FPSCR
ands r2, r1, #0xF	@ Mask to select usr mode
swieq 0x16	        @ If in user mode, switch to SVC
bic r1, r1, #0xF        @ Regardless of previous mode,
orr r1, r1, #0x3	@ switch to SVC mode
msr CPSR, r1
str lr, [r0, #204]	@ SVC lr
mrs r2, SPSR
str r2, [r0, #208]	@ SVC spsr
bic r1, r1, #0x4	@ Switch from SVC to Abt mode
msr CPSR, r1
str lr, [r0, #216]	@ Abt lr
mrs r2, SPSR
str r2, [r0, #220]	@ Abt spsr
bic r1, r1, #0xF
orr r1, r1, #0xB	@ Switch from Abt to Und mode
msr CPSR, r1
str lr, [r0, #228]	@ Und lr
mrs r2, SPSR
str r2, [r0, #232]	@ Und spsr
bic r1, r1, #0x9
msr CPSR, r1		@ Switch from Und to IRQ mode
str lr, [r0, #240]	@ IRQ lr
mrs r2, SPSR
str r2, [r0, #244]	@ IRQ spsr
bic r1, r1, #0xF
orr r1, r1, #0x1	@ Switch to FIQ mode
msr CPSR, r1
add r2, r0, #248
stm r2, {r8-r14}	@ FIQ regs
mrs r2, SPSR
str r2, [r0, #276]	@ FIQ spsr
orr r1, r1, #0xF
msr CPSR, r1		@ Switch to SYS mode
str lr, [r0, #56]	@ Usr lr

ldr r1,[r0,#64]
msr CPSR, r1		@ Switch back to original mode

bl DefStackCtx

ldr pc,[sp], #4

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ Set Stack to Default values for all modes; start by the end of the debugarea
@ and get the nearest lower address aligned to word. From there, dedicate
@ 512Bytes for each stack mode except User, that has 5KB.
@
DefStackCtx:

ldr r0,=CurContext
ldr r3, =DebugAreaEnd
ldr r3, [r3]            @ To properly set stack, get address of end of debugarea
bic r3, r3, #0x3        @ Ensure the address is aligned to word
str r3, [r0, #200]	@ SVC sp
sub r3, r3, #0x200      @ (stack from SVC spans 512Bytes)
str r3, [r0, #212]	@ Abt sp
sub r3, r3, #0x200      @ (stack from Abt spans 512Bytes)
str r3, [r0, #224]	@ Und sp
sub r3, r3, #0x200      @ (stack from Und spans 512Bytes)
str r3, [r0, #236]	@ IRQ sp
sub r3, r3, #0x200      @ (stack from IRQ spans 512Bytes)
str r3, [r0, #268]      @ FIQ sp
sub r3, r3, #0x200      @ (stack from FIQ spans 512Bytes)
str r3, [r0, #52]       @ Usr sp (will later be updated, when loading program)

mov pc, lr


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@   Function (CheckInstCond) that determines if the next instruction execution condition
@	is accomplished, depending on the flags of the CPSR. Return 0 for FALSE and
@	1 for TRUE.
CheckInstCond:
stmdb sp!, {r4-r5, lr}
and r2, r1, #0x80000000	@ N flag
and r3, r1, #0x40000000	@ Z flag
and r4, r1, #0x20000000	@ C flag
and r5, r1, #0x10000000	@ V flag

ands r1, r0, #0xE       @ If the 3 highest bits of the cond are 0, it depends
bne condC		@ on the Z flag
condZ:			@ Inst. will run if cond=0 & Z=1, or cond=1 & Z=0
lsr r3, r3, #30
eor r0, r0, r3
b res
condC:
ands r1, r0, #0xC	@ If the 3 highest bits of 'cond' are 001, it depends
bne condN		@ on the C flag
and r1, r0, #1          @ Inst. will run if cond=2 & C=1, or cond=3 & C=0
lsr r4, r4, #29
eor r0, r1, r4
b res
condN:
and r1, r0, #0xE	@ If the 3 highest bits of 'cond' are 010, it depends
cmp r1, #0x4	@ on the N flag
bne condV
and r1, r0, #1		@ Inst. will run if cond=4 & N=1, or cond=5 & N=0
lsr r2, r2, #31
eor r0, r1, r2
b res
condV:
ands r1, r0, #8		@ If the 3 highest bits of 'cond' are 011, it depends
bne condCZ		@ on the V flag
and r1, r0, #1		@ Inst. will run if cond=6 & V=1, or cond=7 & V=0
lsr r5, r5, #28
eor r0, r1, r5
b res
condCZ:
ands r1, r0, #6		@ If the 3 highest bits of 'cond' are 100, it depends
bne condNV		@ on the C and Z flags
lsrs r4, r4, #29	@ Inst. will run if C=1 & Z=0, or cond=9 & C=0
lsr r3, r3, #30
eorne r0, r4, r3
and r1, r0, #1
eoreq r0, r4, r1
b res
condNV:
ands r1, r0, #4		@ If the 3 highest bits of 'cond' are 101, it depends
bne condNVZ		@ on the N and V flags
lsr r2, r2, #31		@ Inst. will run if (bit 0 of cond XOR (N XOR V))=0
lsr r5, r5, #28
eor r2, r2, r5
and r1, r0, #1
eor r1, r1, r2
eor r0, r1, #1
b res
condNVZ:
@ Inst. will run based on eq. (not(Z)not(b0 XOR (N XOR V)) + b0Z, where b0 is the lowest significant bit of 'cond'
lsr r2, r2, #31
lsr r3, r3, #30
lsr r5, r5, #28
and r1, r0, #1
eor r2, r2, r5
eor r2, r1, r2
orr r2, r3, r2
eor r2, r2, #1
and r1, r1, r3
orr r0, r2, r1

res:
ldmia sp!, {r4-r5, pc}

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@   Function (CheckInst) that determines if the next instruction is to be executed. It
@	is not executed if it is one of the following SWIs:
@     - Code_OSExit
@     - Code_OSWriteStr
@     - Code_OSWriteChar
@     - Code_OSEnterOS
@     - Code_OSLeaveOS
@   Returns in r0 an ExecType that reports if the instruction will be executed or not.
@
CheckInst:
stmdb sp!, {r4, lr}

ldr r2,=CurContext
ldr r0,[r2,#60]
ldr r4,[r0] @ Load the instruction

@ First check if it is a SWI; otherwise, jump to end
and r1, r4, #SWI_Mask
cmp r1, #SWI_Mask
bne End_checkinstr

@ Then check if the exec is inconditional or not
and r1, r4, #Cond_Mask
cmp r1, #0xE0000000
beq checkinstr1	@ Inconditional execution, check if it is one of the captured SWIs

@ Conditional execution, verify if it will execute
lsr r0, r1, #28         @ Load condition field
ldr r1, [r2,#64]	@ Load CPSR
bl CheckInstCond
cmp r0, #0
beq End_checkinstr	@ It the instruction will not be executed, skip checkings

checkinstr1:
bic r4, r4, #Cond_Mask
ldr r1,=Code_OSExit
cmp r4,r1
bne Else_checkinstr1
@ change ExecType
ldr r1,=ExecType
ldr r0,[r1]
add r0, r0, #0x0100
str r0,[r1] @ Change ExecType to Prg_End
b Default_checkinstr

Else_checkinstr1:
ldr r1, =Code_OSWriteStr
cmp r4,r1
bne Else_checkinstr2
@ change ExecType
ldr r1, =ExecType
ldr r0, [r1]
add r0, r0, #0x0300
str r0, [r1]
b Default_checkinstr

Else_checkinstr2:
ldr r1, =Code_OSWriteChar
cmp r4,r1
bne Else_checkinstr3
ldr r1, =ExecType
ldr r0, [r1]
add r0, r0, #0x0200
str r0, [r1]
b Default_checkinstr

Else_checkinstr3:
ldr r1, =Code_OSEnterOS
cmp r4,r1
bne Else_checkinstr4
ldr r0,=CurContext
ldr r1,[r0,#64]		@ CPSR
str r1,[r0,#208]        @ Store previous CPSR in svc SPSR
bic r1,r1,#0x1F
orr r1,r1,#0x13
str r1,[r0,#64]		@ Update CPSR with the SVC user mode
ldr r1,[r0,#60]
str r1,[r0,#204]        @ Store previous PC in LR
ldr r1, =ExecType
ldr r0, [r1]
add r0, r0, #0x0400	@ Update ExecType
str r0, [r1]
b Default_checkinstr

Else_checkinstr4:
ldr r1, =Code_OSLeaveOS
cmp r4,r1
bne End_checkinstr
ldr r0,=CurContext
ldr r1,[r0,#64] 	@CPSR
bic r1,r1,#0xF
str r1,[r0,#64]		@Update CPSR with User mode
ldr r1, =ExecType
ldr r0, [r1]
add r0, r0, #0x0500	@ Update ExecType
str r0, [r1]
b Default_checkinstr

Default_checkinstr:
@ Do not execute the instruction
@ Move forward PC
ldr r0,=CurContext
ldr r1,[r0,#60] @ PC
add r1, r1, #4
str r1,[r0,#60] @ PC = PC + 4

End_checkinstr:
ldr r1,=ExecType
ldr r0, [r1]
ldmia sp!, {r4, pc}

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@   Function (ReturnCLI) that determines whether to execute another instruction or go
@	back to the CLI.
@	It returns a 0 in r0 if the execution is NOT resumed
@
ReturnCLI:
ldr r1,=ExecType
ldr r0,[r1]
cmp r0,#1
beq modeGO
cmp r0,#2
beq modeTR
cmp r0,#3
beq modeGT
cmp r0,#4
beq modeGD
b   No_execute

modeGO:     @ In GO mode
@
@ Check if it is a Brkpt from the list; if so, set ExecType to 0 and jump to No_execute
@
ldr r0,=CurContext
ldr r5,[r0,#60]      @ Load the PC of next instruction
ldr r0,=CurNumBr
ldr r6,[r0]          @ Load the number of BreakPoints
ldr r0, =BrkPtList     @ Pointer to BreakPoints List
loop_GO:
   cmp r6,#0
   beq End_BrkList
   ldr r1,[r0]
   cmp r5,r1
   bne Next_Brk
   ldr r1,=ExecType
   ldr r0, [r1]
   add r0, r0, #0x1000   @ Write the Stop_Br constant to warn of a reached breakpoint
   str r0,[r1]
   mov r0, #0
   b End_RetCLI
Next_Brk:
   sub r6, r6, #1
   add r0, r0, #4
   b   loop_GO
End_BrkList:
@
@ increase the loop counter and check if the limit is reached; if so, jump to No_execute
@ without altering ExecType
@
ldr r0, =Loop
ldr r1,[r0]
add r1, r1, #1
str r1,[r0]
ldr r0, =Num_Loop
cmp r0,r1
beq No_execute

b Execute

modeTR:     @ In TR mode
@
@ Never execute the following instruction, it always returns to the CLI
@
mov r0,#0
b End_RetCLI

modeGT:  @ In GT mode
@
@ stops if the address matches a temporary Brkpt or the max number of loops is reached
@
ldr r0,=CurContext
ldr r5,[r0,#60]      @ Load the PC of next instruction

ldr r0, =GTBrkP     @ Pointer to BreakPoint
ldr r1,[r0]

cmp r5,r1
bne No_BrkT
ldr r1,=ExecType
ldr r0, [r1]
add r0, r0, #0x1000   @ Write the Stop_Br constant to warn the breakpoint has been reached
str r0,[r1]
mov r0, #0
b End_RetCLI

No_BrkT:
@
@ increase the loop counter and check if the limit is reached; if so, jump to No_execute
@ without altering ExecType
@
ldr r0, =Loop
ldr r1,[r0]
add r1, r1, #1
str r1,[r0]
ldr r0, =Num_Loop
cmp r0,r1
beq No_execute
b Execute

modeGD:    @ In GD mode
@
@ it only stops if the max number of loops is reached;
@ increase the loop counter and check if the limit is reached; if so, jump to No_execute
@ without altering ExecType
@
ldr r0, =Loop
ldr r1,[r0]
add r1, r1, #1
str r1,[r0]
ldr r0, =Num_Loop
cmp r0,r1
bne Execute

No_execute:
mov r0,#0
b End_RetCLI
Execute:
mov r0,#0xFF
End_RetCLI:
mov pc,lr

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ set a breakpoint in the loaded program after its pc and on potential branches
@
setimmediatebreakpoints:
@FIXME for branches
stmdb sp!, {r5,r6,r7,lr}
ldr r5,=immediatebreakpoints
ldr r6,=0xE1200071 @ code for bkpt 1
mov r7,#1 @bkpt count

ldr r1,=CurContext
ldr r1,[r1,#60] @ the pc
ldr r3,[r1] @ the instruction

@test for branches (b, bl)
and r2,r3,#0x0E000000
cmp r2,#0x0A000000
bne setimmediatebreakpoints_branchend
bic r2,r3,#0xFF000000 @imm24
tst r2,#0x00800000
orrne r2,r2,#0xFF000000 @ sign extend
add r2,r1,r2, LSL #2
add r2,r2,#8 @ target address
b setimmediatebreakpoints_alternateset
setimmediatebreakpoints_branchend:

@test for (mov pc, rx)
mov r2,#0x0FF00000 @ a move with shifted register (mask)
orr r2,r2,#0x0000F000 @ with target pc (mask)
and r2,r3,r2
mov r0,#0x01A00000 @ a shifted register
orr r0,r0,#0x0000F000 @ target pc
cmp r2,r0
bne setimmediatebreakpoints_alternateend
tst r3,#0x00000FF0 @ mask for a simple register
bne setimmediatebreakpoints_alternateend
and r2,r3,#0x0000000F @ the source register
ldr r0,=CurContext
ldr r2,[r0,r2,LSL #2]

setimmediatebreakpoints_alternateset:
ldr r0,[r2] @ instruction to be saved
str r2,[r5],#4 @ save address
str r0,[r5],#4 @ save content
str r6,[r2] @ set the bkpt
add r7,r7,#1
setimmediatebreakpoints_alternateend:
add r1,r1,#4
ldr r2,[r1] @ instruction to be saved
str r1,[r5],#4 @ save address at bkpt
str r2,[r5],#4 @ save content at bkpt
ldr r5,=immediatebreakpointnumber
str r7,[r5]
str r6,[r1]

mov r0,#0 @ flags, 0 for all memory
swi 0x6E @ OS_SynchronizeCodeAreas

ldmia sp!, {r5,r6,r7,pc}

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ Remove the breakpoints
@
clearimmediatebreakpoints:
ldr r3,=immediatebreakpoints
ldr r0,[r3,#-4] @ number of breakpoints
clearimmediatebreakpoints_loop:
ldr r1,[r3],#4 @ address
ldr r2,[r3],#4 @ content
str r2,[r1]
subs r0,r0,#1
bgt clearimmediatebreakpoints_loop
mov r0,#0 @ all memory
swi 0x6E @ OS_SynchronizeCodeAreas
mov pc,lr

.end
