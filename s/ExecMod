@ !UCDebug, ARM debugger for RISC OS.
@ https://github.com/fuentesp/UCDebug
@ Copyright (C) 2018  University of Cantabria
@
@ !UCDebug was developed by the Computer Architecture and Technology
@ Group at the University of Cantabria. A comprehensive list of authors
@ can be found in the file AUTHORS.txt.
@
@ You can reach the main developers at {fernando.vallejo, cristobal.camarero,
@ pablo.fuentes}@unican.es.
@
@ This program is free software: you can redistribute it and/or modify
@ it under the terms of the GNU General Public License as published by
@ the Free Software Foundation, either version 3 of the License, or
@ (at your option) any later version.
@
@ This program is distributed in the hope that it will be useful,
@ but WITHOUT ANY WARRANTY; without even the implied warranty of
@ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@ GNU General Public License for more details.
@
@ You should have received a copy of the GNU General Public License
@ along with this program.  If not, see <https://www.gnu.org/licenses/>.

.include  "s/Constants"

.global   CodeExecute
.extern   CurContext
.extern   BrkPtList
.extern   CurNumBr
.extern   GTBrkP
.extern   ExecType
.extern	  validMemAddressRange
.global   HandPreRel
.global   HandDatRel
.global   HandUndRel
.global   HandIRQRel
.global	  HandSWIRel
.global   ourregisters
.global   ReturnHandler
.global   StackHandler
.global   PrefetchAddress
.global   drivercount
.global   drivertable
.global   DbgControllerMask
.global   UsrControllerMask
.extern   ControllerBaseAddress
.global   jtp
.extern	  setimmediatebreakpoints
.extern   clearimmediatebreakpoints
.global   CheckInstCond
.global   Device
.global   TimerID

.data

.align 2
ourregisters:  .space 280  @ include CPSR, FPU Regs and usr-specific regs
jumpregisters: .space 64
Loop:          .space  4
HandPreRel:    .space  4
HandDatRel:    .space  4
HandUndRel:    .space  4
HandIRQRel:    .space  4
HandSWIRel:    .space  4
ReturnHandler: .space  4
StackHandler:  .space  4
PrefetchAddress:	.word 0
PendingGetChar:     .word 0
Device: 			.word 0
TimerID:			.word 2

.align 2
drivercount:          .word 0
drivertable:          .space 120	@ 10 simultaneous drivers (device
					@ number, driver address, R12 value)
DbgControllerMask:    .word 0, 0, 0     @ masks for IRQs 1, 2, & basic in the GUI
UsrControllerMask:    .word 0, 0, 0	@ masks for IRQs 1, 2 & basic in the user code

.text

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ Function called from the C-written interface to execute the code to debug.
@
CodeExecute:

@
@ It stores the debugger context including CPSR
@
sub sp,sp,#4
str r0,[sp]
ldr r0,=ourregisters
stm r0, {r0-r12}  @ storing PC is useless; sp and lr is done per-mode
ldr r1,[sp]
str r1,[r0] @ write program r0 in its place
add sp,sp,#4
mrs r1,CPSR @ write debugger CPSR
str r1,[r0,#OffCpsr]
swi OS_EnterOS 		@ enter SVC mode
str sp, [r0, #OffSvcRegs] @ write debugger SVC sp
str lr, [r0, #OffSvcRegs+4] @ write debugger SVC lr
mrs r2, SPSR
str r2, [r0, #OffSvcRegs+8] @ write debugger SVC spsr
mrs r1, cpsr
bic r1, r1, #0x1
msr cpsr, r1 @ switch from SVC to IRQ mode
str sp, [r0, #OffIrqRegs] @ write IRQ sp
str lr, [r0, #OffIrqRegs+4] @ write IRQ lr
mrs r2, spsr
str r2, [r0, #OffIrqRegs+8] @ write IRQ SPSR in its place
orr r1, r1, #0x5
msr cpsr, r1 @ switch from IRQ to Abt mode
str sp, [r0, #OffAbtRegs] @ write abort sp
str lr, [r0, #OffAbtRegs+4] @ write abort lr
mrs r2, spsr
str r2, [r0, #OffAbtRegs+8] @ write abort SPSR
bic r1, r1, #0x6
msr cpsr, r1 @ switch from Abt to FIQ mode
add r2, r0, #OffFiqRegs
stm r2, {r8-r14} @ write FIQ specific regs
mrs r2, spsr
str r2, [r0, #OffFiqRegs+7*4] @ write FIQ SPSR in its place
orr r1, r1, #0xA
msr cpsr, r1 @ switch from FIQ to Und mode
str sp, [r0, #OffUndRegs] @ write undefined sp
str lr, [r0, #OffUndRegs+4] @ write undefined lr
mrs r2, spsr
str r2, [r0, #OffUndRegs+8] @ write undefined SPSR in its place
orr r1, r1, #0x1F
msr cpsr, r1 @ switch to Sys mode
str sp, [r0, #52] @ write user sp
str lr, [r0, #56] @ write user lr

ldr r0, =ControllerBaseAddress
ldr r0, [r0]
add r0, r0, #0x210
ldm r0, {r1-r3}
ldr r0, =DbgControllerMask
stm r0, {r1-r3}			@ Store IRQ enable from GUI


@ If there is a pending interrupt acknowledge it (in
@ case any previous execution has used Go-Fast mode)
ldr r0,=Device
ldr r4,[r0]
ldr r1, [r4,#STCS]
ands r1, r1, #timer_int_bit
strne r1, [r4,#STCS]

@
@ If we are executing in Go Fast mode set up the timer
@ and interruptions to return periodically to the GUI.
@
ldr r1,=ExecType
ldr r0, [r1]
tst r0, #Run_Gf
beq Not_Gf_mode

@ Timer counter initialization
ldr r1, [r4,#STCL0]
add r1, #GF_Timer_Cycles
str r1, [r4, #STC2]


Not_Gf_mode:

@
@ Number of loops = 0
@
ldr r0,=Loop
mov r1,#0
str r1,[r0]
@
@ Checks if the next instruction is in a valid range
@
Another_inst:
ldr r0, =CurContext
ldr r0,[r0,#60]  @ Load the address of the new instruction

bl validMemAddressRange	@ check if the address is within the valid range
cmp r0, #0
ldr r1,=ExecType
bne validAddress	@ valid address, load the instruction
@ Non-valid address
mov r0, #Ex_OoR 	@ mark an Out-of-Range exception, so the instruction is not run
str r0,[r1]
validAddress:
ldr r0, [r1]	@ load the value of ExecType
tst r0, #0xFF00         @ Check State byte of ExecType
bne End_CodeExec
tst r0, #Skip_Inst	@ Instruction is not run, but dbg does not return to GUI
bne checkreturn

@
@ Set Brkpt in the following instruction
@
tst r0, #Run_Gf
blne setfastbreakpoints		@ set breakpoints for Go-Fast mode
bleq setimmediatebreakpoints @ set breakpoints for other modes

@
@ jumptoprogram enables the handler routine for the breakpoint, switches to the context
@ from the debugged program, executes the instruction, stores part of the context from
@ the debugged program (except sp, lr and CPSR) and disables the brkpt handler routine
@
jtp:
bl jumptoprogram
ldr r0, =ExecType
ldr r0, [r0]
tst r0, #SWI_NC
blne ExecuteSWInotcaptured

@
@ Remove Breakpoint from the following instruction
@
bl clearimmediatebreakpoints

@
@ Check if the execution goes on; if at the comeback the state byte at r0 is 0, it
@ returns to the CLI
@
checkreturn:
bl ReturnCLI
cmp r0,#0
bne Another_inst

@ If in Go-Fast mode, reset the timer before returning to interface
@ Acknoledge interrupt
ldr r0,=Device
ldr r0,[r0]
mov r9, #timer_int_bit
str r9, [r0,#STCS]
@ Set timer in the past to avoid future interrupts
ldr r1, [r0,#STCL0]
sub r1, r1, #1
str r1, [r0, #STC2]

@
@ Recover the context from the debugger, including the CPSR
@
End_CodeExec:
ldr r0,=ourregisters
mrs r1, CPSR
bic r1, r1, #0xC	@ switch to SVC mode
msr cpsr, r1
ldr sp, [r0, #OffSvcRegs] @ load debugger SVC sp
ldr lr, [r0, #OffSvcRegs+4] @ load debugger SVC lr
ldr r2, [r0, #OffSvcRegs+8]
msr spsr, r2       @ load debugger SVC spsr
bic r1, r1, #0x1
msr cpsr, r1 @ switch from SVC to IRQ mode
ldr sp, [r0, #OffIrqRegs] @ load IRQ sp
ldr lr, [r0, #OffIrqRegs+4] @ load IRQ lr
ldr r2, [r0, #OffIrqRegs+8]
msr spsr, r2       @ load IRQ SPSR
orr r1, r1, #0x5
msr cpsr, r1 @ switch from IRQ to Abt mode
ldr sp, [r0, #OffAbtRegs] @ load abort sp
ldr lr, [r0, #OffAbtRegs+4] @ load abort lr
ldr r2, [r0, #OffAbtRegs+8]
msr spsr, r2       @ load abort SPSR
bic r1, r1, #0x6
msr cpsr, r1 @ switch from Abt to FIQ mode
add r2, r0, #OffFiqRegs
ldm r2, {r8-r14}   @ load FIQ specific regs
ldr r2, [r0, #OffFiqRegs+7*4]
msr spsr, r2       @ load FIQ SPSR
orr r1, r1, #0xA
msr cpsr, r1 @ switch from FIQ to Und mode
ldr sp, [r0, #OffUndRegs] @ load undefined sp
ldr lr, [r0, #OffUndRegs+4] @ load undefined lr
ldr r2, [r0, #OffUndRegs+8]
msr spsr, r2       @ load undefined SPSR
orr r1, r1, #0x1F
msr cpsr, r1 @ switch to Sys mode
add r1, r0, #4
ldm r1, {r1-r14}  @ recover general purpose regs (previous usr mode is unknown)
ldr r1,[r0,#OffCpsr]  @ CPSR
msr CPSR, r1
ldm r0, {r0-r12}  @ PC is not recovered

mov pc,lr

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ jumptoprogram enables the handler routine for the breakpoint, switches to the context
@ from the debugged program, executes the instruction, stores part of the context from
@ the debugged program (except sp, lr and CPSR) and disables the brkpt handler routine
@
jumptoprogram:

ldr r0,=ReturnHandler
str lr,[r0]
ldr r0,=StackHandler
str sp,[r0]

bl EnableFPU


@We mask irqs in the CPSR before touching the interrupt controller
@in order to not raise now any user interrupts.
mrs r1, cpsr
orr r1, r1, #MaskDisIRQs	@ Disable imprecise aborts and interrupts
msr cpsr, r1		@ to avoid inconsistent states


@
@ write disable and enable IRQ regs to only allow interrupts
@ in the IRQ table to happen
@
mvn r1, #0			@ Load all bits to 1
ldr r4, =ControllerBaseAddress
ldr r4, [r4]
add r5, r4, #0x21C
str r1, [r5], #4                @ Disable all interrupts
str r1, [r5], #4		@ one by one (a stm produces weird
str r1, [r5], #4		@ effects)
ldr r0, =UsrControllerMask
ldm r0, {r1-r3}
add r5, r4, #0x210
orr r1, r1, #irq_int_bit	@ Enable the SysTimer used in the Go-Fast mode
str r1, [r5], #4		@ Enable those interrupts used by the user
str r2, [r5], #4		@ (also register by register)
str r3, [r5], #4
add r5,r4,#0x20C @FIQ control
ldr r0,[r5]
bic r0,r0,#0x80 @disable fiq
str r0,[r5]

ldr r1,=CurContext
ldr r0,[r1,#60]
ldr r0,[r0] @ prefetch the instruction
ldr r0,[r1,#OffIrqRegs]
@ prefetch the IRQ stack of the program, comprising as many
@ addresses as can be handled through a stm
ldr r2,[r0,#16*4]
ldr r2,[r0,#-16*4]
ldr r0,[r1,#OffAbtRegs]
ldr r0,[r0,#-4] @prefetch the (data and prefetch) abort stack of the program
ldr r0,[r1,#OffUndRegs]
ldr r0,[r0,#-4] @prefetch the undefined stack of the program

@ Prefetches required for the handlers
ldr r0,=ExecType
ldr r0,[r0]
ldr r0,=PrefetchAbortHandler
ldr r0,[r0]
ldr r0,=UndefinedInstructHandler
ldr r0,[r0]
ldr r0,=DataAbortHandler
ldr r0,[r0]
ldr r0,=IRQHandler
ldr r0,[r0]
ldr r0,=SWIHandler
ldr r0,[r0]
ldr r0,=ReleaseHandler
ldr r0,[r0]
ldr r0,=ourregisters
ldr r0,[r0]
ldr r0,=ControllerBaseAddress
ldr r0,[r0]
ldr r0,=IRQregBkup
ldr r0,[r0]

@ Prefetch a given address that has caused a page error
ldr r0, =PrefetchAddress
ldr r2, [r0]
cmp r2, #0
beq placeHandlers
@str r2,[r1,#6*4] @ DUMP prefetch on r6
ldrb r3, [r2]
mov r3, #0
str r3, [r0]		@ Clear PrefetchAddress

placeHandlers:
mov r0,#0x01 @ claim + UNdefined instruction
orr r0,r0,#0x100
ldr r1,=UndefinedInstructHandler
mov r2,#0
swi OS_ClaimProcessorVector
@remember to release r1
ldr r0,=HandUndRel
str r1,[r0]

mov r0,#0x03 @ claim + prefetch abort
orr r0,r0,#0x100
ldr r1,=PrefetchAbortHandler
mov r2,#0
swi OS_ClaimProcessorVector
@remember to release r1
ldr r0,=HandPreRel
str r1,[r0]

mov r0,#0x04 @ claim + Data abort
orr r0,r0,#0x100
ldr r1,=DataAbortHandler
mov r2,#0
swi OS_ClaimProcessorVector
@remember to release r1
ldr r0,=HandDatRel
str r1,[r0]

mov r0, #0x06 	@ claim + IRQ
orr r0, r0, #0x100
ldr r1, =IRQHandler
mov r2, #0
swi OS_ClaimProcessorVector
@ remember to release r1
ldr r0, =HandIRQRel
str r1, [r0]

mov r0, #0x02 	@ claim + SWI
orr r0, r0, #0x100
ldr r1, =SWIHandler
mov r2, #0
swi OS_ClaimProcessorVector
@ remember to release r1
ldr r0, =HandSWIRel
str r1, [r0]

@@@@ DUMP pending onto registers
@ldr r4, =ControllerBaseAddress
@add r5,r4,#0x200 @pending
@ldr r0,=CurContext
@ldr r1,[r5]@basic pending
@str r1,[r0,#5*4]
@ldr r1,[r5,#4]@pending 1
@str r1,[r0,#6*4]
@ldr r1,[r5,#8]@pending 2
@str r1,[r0,#7*4]

@
@ Load context from all modes
@
ldr r0,=CurContext
add r1, r0, #68
vldm r1, {s0-s31} @ load floating-point regs
ldr r1, [r1, #128]
vmsr FPSCR, r1 @ load FPSCR
mrs r1, cpsr
bic r1, r1, #0xC
msr cpsr, r1 @ switch from Sys to SVC mode
ldr sp, [r0, #OffSvcRegs] @ load svc sp
ldr lr, [r0, #OffSvcRegs+4] @ load svc lr
ldr r2, [r0, #OffSvcRegs+8]
msr spsr, r2 @ load svc SPSR
mrs r1, cpsr
orr r1, r1, #0x4
msr cpsr, r1 @ switch from SVC to Abt mode
ldr sp, [r0, #OffAbtRegs] @ load abt sp
ldr lr, [r0, #OffAbtRegs+4] @ load abt lr
ldr r2, [r0, #OffAbtRegs+8]
msr spsr, r2 @ load abt SPSR
bic r1, r1, #0x5
msr cpsr, r1 @ switch from Abt to IRQ mode
ldr sp, [r0, #OffIrqRegs] @ load IRQ sp
ldr lr, [r0, #OffIrqRegs+4] @ load IRQ lr
ldr r2, [r0, #OffIrqRegs+8]
msr spsr, r2 @ load IRQ SPSR
orr r1, r1, #0x9
msr cpsr, r1 @ switch from IRQ to Und mode
ldr sp, [r0, #OffUndRegs] @ load Und sp
ldr lr, [r0, #OffUndRegs+4] @ load Und lr
ldr r2, [r0, #OffUndRegs+8]
msr spsr, r2 @ load Und SPSR
bic r1, r1, #0xA
msr cpsr, r1 @ switch from Und to FIQ mode
add r2, r0, #OffFiqRegs
ldm r2, {r8-r14} @ load FIQ specific regs
ldr r2, [r0, #OffFiqRegs+7*4]
msr spsr, r2 @ load FIQ SPSR
orr r1, r1, #0x1F
msr cpsr, r1 @ switch to system mode to access remaining user regs
ldr r1, =AuxCurContext
ldm r0, {r2-r4}		@ get user R0-R2
ldr r5, [r0, #60]	@ and user PC
stm r1, {r2-r5}	@ store them away in an aux var
add r2, r0, #8
ldm r2, {r2-r14} @ load regs from usr mode (to update sp and lr, in case
                 @ the user program was left in a different user mode)
ldr r2,[r0,#OffCpsr]
@orr r2,r2,#MaskDisIRQs @ Disable interrupts (just for debug purposes)
@orr r2,r2,#0x40 @fiq
msr CPSR, r2		@ load usr CPSR
ldm r1, {r0-r2, pc}	@ jump to user program




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@   Function (CheckInstCond) that determines if the next instruction execution condition
@	is accomplished, depending on the flags of the CPSR. Return 0 for FALSE and
@	1 for TRUE.
CheckInstCond:
stmdb sp!, {r4-r5, lr}
and r2, r1, #MaskNflag	@ N flag
and r3, r1, #MaskZflag	@ Z flag
and r4, r1, #MaskCflag	@ C flag
and r5, r1, #MaskVflag	@ V flag

ands r1, r0, #0xE       @ If the 3 highest bits of the cond are 0, it depends
bne condC		@ on the Z flag
condZ:			@ Inst. will run if cond=0 & Z=1, or cond=1 & Z=0
lsr r3, r3, #30
eor r0, r0, r3
b res
condC:
ands r1, r0, #0xC	@ If the 3 highest bits of 'cond' are 001, it depends
bne condN		@ on the C flag
and r1, r0, #1          @ Inst. will run if cond=2 & C=1, or cond=3 & C=0
lsr r4, r4, #29
eor r0, r1, r4
b res
condN:
and r1, r0, #0xE	@ If the 3 highest bits of 'cond' are 010, it depends
cmp r1, #0x4	@ on the N flag
bne condV
and r1, r0, #1		@ Inst. will run if cond=4 & N=1, or cond=5 & N=0
lsr r2, r2, #31
eor r0, r1, r2
b res
condV:
ands r1, r0, #8		@ If the 3 highest bits of 'cond' are 011, it depends
bne condCZ		@ on the V flag
and r1, r0, #1		@ Inst. will run if cond=6 & V=1, or cond=7 & V=0
lsr r5, r5, #28
eor r0, r1, r5
b res
condCZ:
ands r1, r0, #6		@ If the 3 highest bits of 'cond' are 100, it depends
bne condNV		@ on the C and Z flags
lsrs r4, r4, #29	@ Inst. will run if C=1 & Z=0, or cond=9 & C=0
lsr r3, r3, #30
eorne r0, r4, r3
and r1, r0, #1
eoreq r0, r4, r1
b res
condNV:
ands r1, r0, #4		@ If the 3 highest bits of 'cond' are 101, it depends
bne condNVZ		@ on the N and V flags
lsr r2, r2, #31		@ Inst. will run if (bit 0 of cond XOR (N XOR V))=0
lsr r5, r5, #28
eor r2, r2, r5
and r1, r0, #1
eor r1, r1, r2
eor r0, r1, #1
b res
condNVZ:
@ Inst. will run based on eq. (not(Z)not(b0 XOR (N XOR V)) + b0Z, where b0 is the lowest significant bit of 'cond'
lsr r2, r2, #31
lsr r3, r3, #30
lsr r5, r5, #28
and r1, r0, #1
eor r2, r2, r5
eor r2, r1, r2
orr r2, r3, r2
eor r2, r2, #1
and r1, r1, r3
orr r0, r2, r1

res:
ldmia sp!, {r4-r5, pc}

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@   Function (ReturnCLI) that determines whether to execute another instruction or go
@	back to the CLI.
@	It returns a 0 in r0 if the execution is NOT resumed
@
ReturnCLI:
ldr r1,=ExecType
ldr r0,[r1]
bic r0, #Skip_Inst	@ clear bit to jump current instruction
str r0, [r1]
cmp r0, #Run_Go
beq modeGO
cmp r0, #Run_Tr
beq modeTR
cmp r0, #Run_Gt
beq modeGT
cmp r0, #Run_Gd
beq modeGD
cmp r0, #Run_Gf
beq modeGF
b   No_execute

modeGO:     @ In GO mode
@
@ Check if the next instruction is a Brkpt from the list; if so, set ExecType to 0 and jump to No_execute
@
ldr r0,=CurContext
ldr r5,[r0,#60]      @ Load the PC of next instruction
ldr r0,=CurNumBr
ldr r6,[r0]			@ Load the number of BreakPoints
ldr r0, =BrkPtList     @ Pointer to BreakPoints List
loop_GO:
   cmp r6,#0
   beq End_BrkList	@ Exit if the next instrcution isn't a breakpoint
   ldr r1,[r0], #4
   cmp r5,r1
   bne Next_Brk		@ If the breakpoint is not set in the next instruction
   ldr r1,=ExecType
   ldr r0, [r1]
   add r0, r0, #Stop_Br		@ Write the Stop_Br constant to warn of a reached breakpoint
   str r0,[r1]
   mov r0, #0
   b End_RetCLI
Next_Brk:	@Decrease the breakpoint counter
   sub r6, r6, #1
   b   loop_GO
End_BrkList:
@
@ increase the loop counter and check if the limit is reached; if so, jump to No_execute
@ without altering ExecType
@
ldr r0, =Loop
ldr r1,[r0]
add r1, r1, #1
str r1,[r0]
ldr r0, =Num_Loop
cmp r0,r1
beq No_execute

b Execute

modeTR:     @ In TR mode
@
@ Never execute the following instruction, it always returns to the CLI...
@ UNLESS there has been a data abort due to paging error
@
ldr r0, =PrefetchAddress
ldr r0, [r0]
cmp r0, #0	@ If address is non-zero, repeat the instruction
bne Execute
mov r0,#0
b End_RetCLI

modeGT:  @ In GT mode
@
@ stops if the address matches a temporary Brkpt or the max number of loops is reached
@
ldr r0,=CurContext
ldr r5,[r0,#60]      @ Load the PC of next instruction

ldr r0, =GTBrkP     @ Pointer to BreakPoint
ldr r1,[r0]

cmp r5,r1
bne No_BrkT
ldr r1,=ExecType
ldr r0, [r1]
add r0, r0, #Stop_Br		@ Warn the breakpoint has been reached
str r0,[r1]
mov r0, #0
b End_RetCLI

No_BrkT:
@
@ increase the loop counter and check if the limit is reached; if so, jump to No_execute
@ without altering ExecType
@
ldr r0, =Loop
ldr r1,[r0]
add r1, r1, #1
str r1,[r0]
ldr r0, =Num_Loop
cmp r0,r1
beq No_execute
b Execute

modeGD:    @ In GD mode
@
@ it only stops if the max number of loops is reached;
@ increase the loop counter and check if the limit is reached; if so, jump to No_execute
@ without altering ExecType
@
ldr r0, =Loop
ldr r1,[r0]
add r1, r1, #1
str r1,[r0]
ldr r0, =Num_Loop
cmp r0,r1
bne Execute
b No_execute

modeGF:		@ In GoFast mode
@
@ it stops if a breakpoint set by the user has been reached
@
ldr r0,=CurNumBr
ldr r6,[r0]			@ Load the number of BreakPoints
@ Check if the number of breakpoints set by the user exceeds the table maximum
Check_number_breakpoints:
	cmp r6, #MaxBrPoints @ Checks if there are too many breakpoints
	ldrgt r1,=ExecType
	ldrgt r0, [r1]
	addgt r0, r0, #Ex_TMB @ Send error code to user
	strgt r0,[r1]
	movgt r0, #0 @ Indicate to return to the CLI
	bgt End_RetCLI

ldr r0,=CurContext
ldr r5,[r0,#60]			@ Load the PC of next instruction
ldr r0, =BrkPtList		@ Pointer to BreakPoints List
loop_GF:	@ Looks if a breakpoint
   cmp r6,#0
   beq No_execute @ If it was produced by the timer interruption
   ldr r1,[r0], #4
   cmp r5,r1
   beq end_loop_GF @ If the instruction is a breakpoint
   sub r6, r6, #1
   b   loop_GF
end_loop_GF:
   ldr r1,=ExecType
   ldr r0, [r1]
   add r0, r0, #Stop_Br		@ Write the Stop_Br constant to warn of a
   str r0,[r1]			@ reached breakpoint

No_execute:
mov r0,	#Stop_Ex
b End_RetCLI
Execute:
mov r0, #0xFF
End_RetCLI:
mov pc,lr


ExecuteSWInotcaptured:
@ Clean the bit for SWI not captured
ldr r0, =ExecType
ldr r1, [r0]
bic r1, r1, #SWI_NC
str r1, [r0]
@ Substitute the bkpt instruction with the SWI we need to execute
ldr r10, =CurContext
ldr r1, [r10, #60] 	@ Load the lr of the SWI instruction we need to execute
ldr r1, [r1, #-4]	@ Load the SWI code
bic r1, r1, #Cond_Mask	   @ Clean the conditional field
orr r1, r1, #Alw_Exec_Inst @ and replace it with a code for always execute
ldr r0, =replaceswi
str r1, [r0]		@ Substitute the instruction with the SWI we need to execute
mov r0, #0 			@ flags, 0 for all memory
swi OS_SynchronizeCodeAreas
@ Get execution flags from user CPSR
ldr r0, [r10, #OffCpsr]
and r1, r0, #MaskCpsrFlags	@ Extract previous user flags
bic r2, r0, #MaskCpsrFlags	@ Preserve user CPSR without flags
mrs r3, CPSR
bic r3, #MaskCpsrFlags
orr r3, r1, r3	@ Get current CPSR with user flags
str r2, [sp, #-4]!	@ Save previous user CPSR without flags
str r3, [sp, #-4]!	@ Save updated CPSR to set it before running SWI
@ Check if the SWI was executed in FIQ mode
and r0, r0, #MaskSysMode
subs r12, r0, #MaskFiqMode
@ Load the registers we could need for the SWI
ldm r10, {r0-r9}
@ If we need the FIQ regs
addeq r11, r10, #OffFiqRegs
ldmeq r11, {r8, r9}
ldr r11, [sp], #4	@ Update CPSR for the execution of the SWI
msr CPSR, r11
replaceswi:
bkpt @ bkpt to provoke a prefetch abort (this inst should be replaced)
@ Store the result in the user context; first common regs (R0-R7), then CPSR, and finally R8-R9
@	(distinguishing between FIQ and other modes)
mov r11, r10
stmia r10!, {r0-r7}
ldr r0, [sp], #4	@ Get user CPSR back (without flags)
mrs r1, CPSR
and r1, r1, #MaskCpsrFlags
orr r1, r1, r0		@ Save user CPSR with updated flags
str r1, [r11, #OffCpsr]
cmp r12, #0
addeq r10, r10, #OffFiqRegs-32	@ If in FIQ mode, update FIQ regs (R10 is pointing to regular R8)
stm r10, {r8, r9}
mov pc, lr




.end
